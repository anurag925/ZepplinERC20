{"version":3,"sources":["webpack://Ganache/webpack/universalModuleDefinition","webpack://Ganache/webpack/bootstrap","webpack://Ganache/./lib/utils/to.js","webpack://Ganache/external \"util\"","webpack://Ganache/external \"async\"","webpack://Ganache/external \"ethereumjs-util\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subprovider.js\"","webpack://Ganache/external \"lodash\"","webpack://Ganache/external \"source-map-support/register\"","webpack://Ganache/external \"ethereumjs-account\"","webpack://Ganache/./lib/utils/runtimeerror.js","webpack://Ganache/./lib/utils/transaction.js","webpack://Ganache/external \"ethereumjs-block\"","webpack://Ganache/./lib/utils/log.js","webpack://Ganache/./lib/utils/receipt.js","webpack://Ganache/./lib/utils/errorhelper.js","webpack://Ganache/external \"events\"","webpack://Ganache/./node_modules/web3/src/index.js","webpack://Ganache/./lib/provider.js","webpack://Ganache/./node_modules/ethereumjs-wallet/index.js","webpack://Ganache/./lib/blockchain_double.js","webpack://Ganache/external \"merkle-patricia-tree\"","webpack://Ganache/external \"level-sublevel\"","webpack://Ganache/./lib/database/txserializer.js","webpack://Ganache/./lib/utils/txrejectederror.js","webpack://Ganache/./lib/utils/block_helper.js","webpack://Ganache/./public-exports.js","webpack://Ganache/external \"web3-provider-engine\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subscriptions\"","webpack://Ganache/./lib/subproviders/requestfunnel.js","webpack://Ganache/./lib/subproviders/delayedblockfilter.js","webpack://Ganache/./lib/subproviders/gethdefaults.js","webpack://Ganache/./lib/subproviders/geth_api_double.js","webpack://Ganache/./lib/statemanager.js","webpack://Ganache/external \"ethereumjs-abi\"","webpack://Ganache/external \"ethereumjs-tx\"","webpack://Ganache/external \"ethereumjs-tx/fake\"","webpack://Ganache/external \"assert\"","webpack://Ganache/external \"rlp\"","webpack://Ganache/external \"seedrandom\"","webpack://Ganache/external \"bip39\"","webpack://Ganache/external \"safe-buffer\"","webpack://Ganache/external \"crypto\"","webpack://Ganache/external \"scrypt.js\"","webpack://Ganache/external \"uuid/v4\"","webpack://Ganache/external \"bs58check\"","webpack://Ganache/./node_modules/ethereumjs-wallet/hdkey.js","webpack://Ganache/external \"hdkey\"","webpack://Ganache/external \"ethereumjs-vm-coverage\"","webpack://Ganache/external \"heap\"","webpack://Ganache/./lib/database.js","webpack://Ganache/./lib/database/leveluparrayadapter.js","webpack://Ganache/./lib/database/levelupobjectadapter.js","webpack://Ganache/external \"levelup\"","webpack://Ganache/external \"encoding-down\"","webpack://Ganache/./lib/database/filedown.js","webpack://Ganache/external \"abstract-leveldown\"","webpack://Ganache/external \"fs\"","webpack://Ganache/external \"path\"","webpack://Ganache/external \"cachedown\"","webpack://Ganache/./lib/database/blockserializer.js","webpack://Ganache/./lib/database/bufferserializer.js","webpack://Ganache/./lib/database/blocklogsserializer.js","webpack://Ganache/./lib/database/receiptserializer.js","webpack://Ganache/external \"tmp\"","webpack://Ganache/./lib/utils/forkedblockchain.js","webpack://Ganache/./lib/utils/forkedstoragetrie.js","webpack://Ganache/external \"web3-core\"","webpack://Ganache/external \"web3-eth\"","webpack://Ganache/external \"web3-net\"","webpack://Ganache/external \"web3-eth-personal\"","webpack://Ganache/external \"web3-shh\"","webpack://Ganache/external \"web3-bzz\"","webpack://Ganache/external \"web3-utils\"","webpack://Ganache/external \"bn.js\"","webpack://Ganache/external \"eth-sig-util\"","webpack://Ganache/./lib/utils/random.js","webpack://Ganache/./lib/block_tracker.js","webpack://Ganache/./lib/server.js","webpack://Ganache/./lib/webSocketServer.js","webpack://Ganache/external \"websocket\"","webpack://Ganache/./lib/httpServer.js","webpack://Ganache/external \"http\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","buffer","val","data","Buffer","from","stripHexPrefix","isBuffer","hex","indexOf","trim","BN","intToHex","toString","addHexPrefix","_rpcQuantityHexString","this","replace","rpcQuantityHexString","rpcDataHexString","length","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","rpcError","id","code","msg","JSON","stringify","jsonrpc","error","message","require","inherits","to","abi","RuntimeError","transactions","vmOutput","Error","captureStackTrace","constructor","results","hashes","combine","err","keys","push","apply","tx","result","vm","exception","reason","hash","returnData","return","slice","rawDecode","exceptionError","program_counter","runState","programCounter","exceptionResult","count","fromResults","EthereumJsTransaction","EthereumJsFakeTransaction","ethUtil","assert","rlp","sign","fakeHash","_hash","arguments","BUFFER_ZERO","fixProps","_originals","forEach","fieldName","fieldLength","index","_fields","descriptor","getOwnPropertyDescriptor","set","v","configZeroableField","vDescriptors","sigV","chainId","Math","floor","_chainId","isFake","configurable","getSenderAddress","_from","Transaction","[object Object]","type","types","none","super","decode","self","isArray","field","raw","initData","signed","fake","json","toAccount","buf","equals","setLengthLeft","input","options","nonce","gasLimit","gas","gasPrice","_type","expectedNonce","isSigned","block","transactionIndex","txns","blockHash","blockNumber","header","includeSignature","items","cacheRaw","rlphash","Log","toJSON","logIndex","transactionHash","address","topics","Receipt","logs","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","txHash","map","log","LevelUpOutOfRangeError","len","BlockOutOfRangeError","version","core","Eth","Net","Personal","Shh","Bzz","Web3","_this","packageInit","eth","shh","bzz","setProvider","provider","net","addProviders","ProviderEngine","SubscriptionSubprovider","RequestFunnel","DelayedBlockFilter","GethDefaults","GethApiDouble","BlockTracker","EventEmitter","_","Provider","_applyDefaultOptions","gethApiDouble","engine","blockTracker","blockchain","state","subscriptionSubprovider","manager","addProvider","setMaxListeners","start","sendAsync","send","close","_queueRequest","_processRequestQueue","on","notification","emit","defaultOptions","vmErrorsOnRPCResponse","verbose","asyncRequestProcessing","logger","merge","payload","callback","externalize","cloneDeep","intermediary","response","reportErrorInResponse","split","process","nextTick","stopMining","stop","_requestQueue","setImmediate","_requestInProgress","args","shift","cleanUpErrorObject","errorObject","stack","transactionMethods","_isTransactionRequest","request","method","_typeof","iterator","obj","crypto","scryptsy","uuidv4","bs58check","decipherBuffer","decipher","concat","update","final","Wallet","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","privKey","generate","icapDirect","randomBytes","max","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getAddressString","getChecksumAddressString","toChecksumAddress","toV3","password","opts","derivedKey","salt","iv","kdf","kdfparams","dklen","prf","pbkdf2Sync","cipher","createCipheriv","ciphertext","mac","sha3","random","uuid","cipherparams","getV3Filename","timestamp","Date","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","fromPrivateKey","fromExtendedPrivateKey","tmp","fromV1","parse","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","seed","createDecipheriv","IV","fromV3","toLowerCase","fromEthSale","encseed","wallet","ethaddr","Account","Block","VM","Trie","async","Heap","Database","promisify","BlockchainDouble","console","trie","db_path","pending_transactions","blockGasLimit","defaultTransactionGasLimit","timeAdjustment","time","debug","hardfork","allowUnlimitedContractSize","emitFreeLogs","assign","initialize","accounts","latestBlock","stateRoot","stateTrie","createStateTrie","trie_db","createVMFromStateTrie","setTime","createGenesisBlock","stateManager","checkpoint","eachSeries","accountData","finished","putAccount","account","commit","putBlock","activatePrecompiles","getBlock","done","e","info","opcode","argsNum","in","arg","db","createBlock","blocks","last","getEffectiveBlockNumber","getHeight","blockHashes","blockIndex","first","receipts","requests","blockLogs","transactionReceipts","parallel","popBlock","del","pop","series","newLastBlock","setStateRoot","_storageTries","clearPendingTransactions","parent","getParent","parentNumber","currentTime","parentHash","getQueuedNonce","addressBuffer","pendingNonce","queueTransaction","sortByPriceAndNonce","sortedByNonce","arr","nonceSort","a","b","sort","heap","sortedTransactions","size","best","processCall","runCall","parentBlock","newBlock","runArgs","skipBalance","skipNonce","runTx","vmerr","processBlock","runBlock","skipBlockValidation","totalBlockGasUsage","txTrie","rcptTrie","promises","putInTrie","put","receipt","txLogs","receiptLog","j","rcpt","toArrayLike","createdAddress","bitvector","rawReceipt","rcptBuffer","encode","serialize","Promise","all","transactionsTrie","receiptTrie","processNextBlock","undefined","currentTransactions","totalGasLimit","maxGasLimit","processTransactionTrace","params","targetHash","txHashCurrentlyProcessing","txCurrentlyProcessing","storageStack","currentDepth","returnVal","returnValue","structLogs","stepListener","event","next","gasLeft","gasUsedThisStep","memory","disableMemory","match","lastItem","disableStack","item","structLog","depth","gasCost","op","pc","storage","disableStorage","processStorageTrace","getTransactionReceipt","targetBlock","beforeTxListener","afterTxListener","removeListeners","removeListener","getContractStorage","getAccount","currentStateRoot","getNonce","getBalance","balance","getStorage","position","getCode","getTransaction","notFound","pendingTxs","getBlockLogs","effective","getTime","increaseTime","seconds","date","now","fromJSON","TXRejectedError","includeFullTransactions","mixHash","sha3Uncles","uncleHash","bloom","transactionsRoot","receiptsRoot","miner","coinbase","difficulty","totalDifficulty","extraData","toJsonRpc","uncles","Server","server","_webpacked","Subprovider","methods","eth_call","eth_getStorageAt","eth_sendTransaction","eth_sendRawTransaction","eth_newBlockFilter","eth_getFilterChanges","eth_getFilterLogs","queue","isWorking","handleRequest","end","external","processNext","cb","watching","handleNewBlockFilter","handleGetFilterChanges","filterId","currentBlockHash","previousBlockHash","emitPayload","res","StateManager","blockHelper","pkg","initialized","initialization_error","post_initialization_callbacks","callbacks","waitForInitialization","addedBlockParam","requiresDefaultBlockParameter","minLength","errorMessage","getDelayedHandler","eth_getBalance","eth_getCode","eth_getTransactionCount","eth_estimateGas","eth_accounts","eth_blockNumber","eth_coinbase","eth_mining","is_mining","eth_hashrate","eth_gasPrice","eth_getBlockByNumber","eth_getBlockByHash","eth_getBlockTransactionCountByNumber","eth_getBlockTransactionCountByHash","eth_getTransactionReceipt","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","hashOrNumber","eth_getTransactionByBlockNumberAndIndex","getTransactionCount","eth_sign","dataToSign","eth_signTypedData","typedDataToSign","signTypedData","txData","rawTx","queueRawTransaction","queueStorage","latestFilterId","mine","eth_getLogs","filter","getLogs","eth_uninstallFilter","eth_protocolVersion","bzz_hive","bzz_info","shh_version","eth_getCompilers","eth_syncing","net_listening","net_peerCount","web3_clientVersion","web3_sha3","string","net_version","miner_start","threads","startMining","miner_stop","rpc_modules","rpc","web3","evm","personal","personal_listAccounts","personal_accounts","personal_newAccount","createAccount","account_passwords","personal_importRawKey","rawKey","secretKey","personal_lockAccount","unlocked_accounts","personal_unlockAccount","duration","storedPassword","personal_sendTransaction","ret","evm_snapshot","snapshot","evm_revert","snapshotId","revert","evm_increaseTime","evm_setTime","evm_mine","debug_traceTransaction","queueTransactionTrace","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","uncleIndex","eth_getWork","eth_submitWork","powHash","digest","eth_submitHashrate","hashRate","clientID","db_putString","dbName","db_getString","db_putHex","db_getHex","shh_post","priority","ttl","shh_newIdentity","shh_hasIdentity","shh_newGroup","shh_addToGroup","shh_newFilter","shh_uninstallFilter","shh_getFilterChanges","shh_getMessages","seedrandom","bip39","hdkey","ForkedBlockchain","sigUtil","ZERO_BUFFER","fork","secure","total_accounts","latest_filter_id","action_queue","action_processing","snapshots","network_id","mnemonic","fromMasterSeed","mnemonicToSeed","wallet_hdpath","hdPath","gasPriceVal","blockTime","is_mining_on_interval","mining_interval_timeout","_provider","default_balance_ether","randomAlphaNumericString","entropyToMnemonic","defaultBalanceWei","toWei","reduce","idx","forkVersion","mineOnInterval","_minerCancellationToken","clearTimeout","cancelled","cancellationToken","timeout","setTimeout","unref","derivePath","getWallet","publicKey","_queueTransaction","processNextAction","txJsonRpc","isKnownAccount","_setTransactionDefaults","allocUnsafe","override","queued","processTransaction","processGasEstimate","msgHash","hashPersonalMessage","sgn","ecsign","toRpcSig","EIP712Domain","domain","primaryType","printTransactionReceipt","runtimeError","finishedPrinting","processBlocks","totalBlocks","amountProcessed","whilst","createTransactionWithCorrectNonce","gasRefund","add","expectedAddress","expectedTopics","fromBlock","toBlock","current","filtered","keep","expectedTopic","logTopic","isMatch","includes","nextSnapshot","during","doneWithTest","nextBlock","hasContractCode","getContractCode","isUnlocked","validateNonce","resolve","expected","actual","reject","then","catch","HDKey","EthereumHDKey","fromHDKey","_hdkey","seedBuffer","fromExtendedKey","base58key","privateExtendedKey","publicExtendedKey","path","derive","deriveChild","_privateKey","_publicKey","LevelUpArrayAdapter","LevelUpObjectAdapter","levelup","filedown","cachedown","txserializer","blockserializer","bufferserializer","BlockLogsSerializer","ReceiptSerializer","directory","finishInitializing","dir","getDir","levelupOptions","valueEncoding","store","maxSize","Sublevel","serializer","sublevel","_get","_put","encoded","RangeError","newLength","valueserializer","keyserializer","encodedKey","decodedValue","batch","array","each","isOpen","util","AbstractLevelDOWN","fs","FileDown","location","_open","writeFile","readFile","_del","unlink","_batch","txJson","database","ForkedStorageTrie","forkBlockNumber","fork_block_number","providers","HttpProvider","storageTrieCache","patchVM","getId","_lookupStorageTrie","lookupStorageTrie","_cache","_lookupAccount","createForkedStorageTrie","isFallbackBlock","isBlockHash","isFallbackBlockHash","getFallbackBlock","numberOrHash","toBN","real","getRelativeBlockNumber","getBlockReference","blockReference","keyExists","exists","fetchCodeFromFallback","acc","fetchAccountFromFallback","receiptJson","fetchBalanceFromFallback","fetchNonceFromFallback","setCode","getSafeFallbackBlockNumber","safeBlockNumber","relative","currentProvider","_checkpointTrie","customCheckpoint","_revertTrie","checkpoints","customRevert","MerklePatriciaTree","findPath","node","remainder","getStorageAt","rng","alphabet","text","charAt","GanacheBlockTracker","_blockchain","getTrackingBlock","awaitCurrentBlock","_setCurrentBlock","_currentBlock","getCurrentBlock","once","_isRunning","oldBlock","webSocketServer","httpServer","keepAliveTimeout","connectionCounter","connections","conn","oldListen","listen","ws","oldClose","destroy","WebSocketServer","ConnectionManager","connectionsBySubscriptionId","_updateSubscriptions","manageConnection","_logPayload","_handleRequest","connectionManager","wsServer","autoAcceptConnections","connection","subscriptions","utf8Data","subscriptionId","subscription","http","sendResponse","statusCode","headers","writeHead","createServer","body","chunk","requestHeaders","origin","createCORSResponseHeaders","ganacheProvider"],"mappings":"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","file":"ganache.core.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Ganache\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ganache\"] = factory();\n\telse\n\t\troot[\"Ganache\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","let utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function(val) {\n    let data;\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = Buffer.from(utils.stripHexPrefix(val), \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  _rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcDataHex = this.rpcDataHexString(val, length);\n      return rpcDataHex === \"0x\" ? null : rpcDataHex;\n    }\n  },\n\n  nullableRpcQuantityHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcQuantityHex = this._rpcQuantityHexString(val, length);\n      return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n    }\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  },\n\n  rpcError: function(id, code, msg) {\n    return JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: id,\n      error: {\n        code: code,\n        message: msg\n      }\n    });\n  }\n};\n","module.exports = require(\"util\");","module.exports = require(\"async\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"web3-provider-engine/subproviders/subprovider.js\");","module.exports = require(\"lodash\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethereumjs-account\");","var inherits = require(\"util\").inherits;\nvar to = require(\"./to\");\nvar abi = require(\"ethereumjs-abi\");\n\ninherits(RuntimeError, Error);\n\n// Note: ethereumjs-vm-coverage will return an object that has a \"results\" and \"receipts\" keys.\n// You should pass in the whole object.\nfunction RuntimeError(transactions, vmOutput) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n\n  this.results = {};\n  this.hashes = [];\n\n  // handles creating this.message\n  this.combine(transactions, vmOutput);\n}\n\nRuntimeError.prototype.combine = function(transactions, vmOutput) {\n  // Can be combined with vmOutput or another RuntimeError.\n  if (transactions instanceof RuntimeError) {\n    var err = transactions;\n    var keys = Object.keys(err.results);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      this.results[key] = err.results[key];\n      Array.prototype.push.apply(this.hashes, err.hashes);\n    }\n  } else {\n    var results = vmOutput.results;\n\n    for (i = 0; i < transactions.length; i++) {\n      var tx = transactions[i];\n      var result = results[i];\n\n      // 1 means no error, oddly.\n      if (result.vm.exception !== 1) {\n        var hash = to.hex(tx.hash());\n        this.hashes.push(hash);\n        var reason;\n        var returnData = result.vm.return;\n        if (returnData && returnData.slice(0, 4).toString(\"hex\") === \"08c379a0\") {\n          reason = abi.rawDecode([\"string\"], returnData.slice(4))[0];\n        }\n\n        this.results[hash] = {\n          error: result.vm.exceptionError.error || result.vm.exceptionError,\n          program_counter: result.vm.runState.programCounter,\n          return: to.hex(result.vm.return),\n          reason: reason\n        };\n      }\n    }\n  }\n\n  // Once combined, set the message\n  if (this.hashes.length === 1) {\n    var exceptionResult = this.results[this.hashes[0]];\n    var message = \"VM Exception while processing transaction: \" + exceptionResult.error;\n    if (exceptionResult.reason) {\n      message += \" \" + exceptionResult.reason;\n    }\n    this.message = message;\n  } else {\n    message = \"Multiple VM Exceptions while processing transactions: \\n\\n\";\n\n    for (i = 0; i < this.hashes.length; i++) {\n      hash = this.hashes[i];\n      exceptionResult = this.results[hash];\n      message += hash + \": \" + exceptionResult.error;\n      if (exceptionResult.reason) {\n        message += \" \" + exceptionResult.reason;\n      }\n      message += \"\\n\";\n    }\n    this.message = message;\n  }\n};\n\nRuntimeError.prototype.count = function() {\n  return Object.keys(this.results).length;\n};\n\nRuntimeError.fromResults = function(transactions, vmOutput) {\n  var err = new RuntimeError(transactions, vmOutput);\n\n  if (err.count() === 0) {\n    return null;\n  }\n\n  return err;\n};\n\nmodule.exports = RuntimeError;\n","const EthereumJsTransaction = require(\"ethereumjs-tx\");\nconst EthereumJsFakeTransaction = require(\"ethereumjs-tx/fake\");\nconst ethUtil = require(\"ethereumjs-util\");\nconst assert = require(\"assert\");\nconst rlp = require(\"rlp\");\nconst to = require(\"./to\");\n\nconst sign = EthereumJsTransaction.prototype.sign;\nconst fakeHash = function() {\n  // this isn't memoization of the hash. previous versions of ganache-core\n  // created hashes in a different/incorrect way and are recorded this way\n  // in snapshot dbs. We are preserving the chain's immutability by using the\n  // stored hash instead of calculating it.\n  if (this._hash != null) {\n    return this._hash;\n  }\n  return EthereumJsFakeTransaction.prototype.hash.apply(this, arguments);\n};\nconst BUFFER_ZERO = Buffer.from([0]);\n\nfunction configZeroableField(tx, fieldName, fieldLength = 32) {\n  const index = tx._fields.indexOf(fieldName);\n  const descriptor = Object.getOwnPropertyDescriptor(tx, fieldName);\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, fieldName, {\n    set: (v) => {\n      descriptor.set.call(tx, v);\n      v = ethUtil.toBuffer(v);\n      assert(fieldLength >= v.length, `The field ${fieldName} must not have more ${fieldLength} bytes`);\n      tx._originals[index] = v;\n    },\n    get: () => {\n      return tx._originals[index];\n    }\n  });\n}\n\n/**\n * etheruemjs-tx's Transactions don't behave quite like we need them to, so\n * we're monkey-patching them to do what we want here.\n * @param {Transaction} tx The Transaction to fix\n * @param {Object} [data] The data object\n */\nfunction fixProps(tx, data) {\n  // ethereumjs-tx doesn't allow for a `0` value in fields, but we want it to\n  // in order to differentiate between a value that isn't set and a value\n  // that is set to 0 in a fake transaction.\n  // Once https://github.com/ethereumjs/ethereumjs-tx/issues/112 is figured\n  // out we can probably remove this fix/hack.\n  // We keep track of the original value and return that value when\n  // referenced by its property name. This lets us properly encode a `0` as\n  // an empty buffer while still being able to differentiate between a `0`\n  // and `null`/`undefined`.\n  tx._originals = [];\n  const fieldNames = [\"nonce\", \"gasPrice\", \"gasLimit\", \"value\"];\n  fieldNames.forEach((fieldName) => configZeroableField(tx, fieldName, 32));\n\n  // Ethereumjs-tx doesn't set the _chainId value whenever the v value is set,\n  // which causes transaction signing to fail on transactions that include a\n  // chain id in the v value (like ethers.js does).\n  // Whenever the v value changes we need to make sure the chainId is also set.\n  const vDescriptors = Object.getOwnPropertyDescriptor(tx, \"v\");\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, \"v\", {\n    set: (v) => {\n      vDescriptors.set.call(tx, v);\n      // calculate chainId from signature\n      const sigV = ethUtil.bufferToInt(tx.v);\n      let chainId = Math.floor((sigV - 35) / 2);\n      if (chainId < 0) {\n        chainId = 0;\n      }\n      tx._chainId = chainId || 0;\n    }\n  });\n\n  if (tx.isFake()) {\n    /**\n     * @prop {Buffer} from (read/write) Set from address to bypass transaction\n     * signing on fake transactions.\n     */\n    Object.defineProperty(tx, \"from\", {\n      enumerable: true,\n      configurable: true,\n      get: tx.getSenderAddress.bind(tx),\n      set: (val) => {\n        if (val) {\n          tx._from = ethUtil.toBuffer(val);\n        } else {\n          tx._from = null;\n        }\n      }\n    });\n\n    if (data && data.from) {\n      tx.from = data.from;\n    }\n\n    tx.hash = fakeHash;\n  }\n}\n\n/**\n * Parses the given data object and adds its properties to the given tx.\n * @param {Transaction} tx\n * @param {Object} [data]\n */\nfunction initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = Buffer.from(ethUtil.stripHexPrefix(data), \"hex\");\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      // Set chainId value from the data, if it's there and the data didn't\n      // contain a `v` value with chainId in it already. If we do have a\n      // data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}\n\nmodule.exports = class Transaction extends EthereumJsTransaction {\n  /**\n   * @param {Object} [data] The data for this Transaction.\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  constructor(data, type = Transaction.types.none) {\n    super();\n\n    this.type = type;\n\n    fixProps(this, data);\n    initData(this, data);\n  }\n\n  static get types() {\n    // values must be powers of 2\n    return {\n      none: 0,\n      signed: 1,\n      fake: 2\n    };\n  }\n\n  /**\n   * Prepares arbitrary JSON data for use in a Transaction.\n   * @param {Object} json JSON object representing the Transaction\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  static fromJSON(json, type) {\n    let toAccount;\n    if (json.to) {\n      // Remove all padding and make it easily comparible.\n      const buf = to.buffer(json.to);\n      if (buf.equals(Buffer.from([0]))) {\n        // if the address is 0x0 make it 0x0{20}\n        toAccount = ethUtil.setLengthLeft(buf, 20);\n      } else {\n        toAccount = buf;\n      }\n    }\n    const data = json.data || json.input;\n    const options = {\n      nonce: ethUtil.toBuffer(to.hex(json.nonce)),\n      from: ethUtil.toBuffer(to.hex(json.from)),\n      value: ethUtil.toBuffer(to.hex(json.value)),\n      gasLimit: ethUtil.toBuffer(to.hex(json.gas || json.gasLimit)),\n      gasPrice: ethUtil.toBuffer(to.hex(json.gasPrice)),\n      data: data ? Buffer.from(ethUtil.stripHexPrefix(data), \"hex\") : null,\n      to: toAccount,\n      v: ethUtil.toBuffer(json.v),\n      r: ethUtil.toBuffer(json.r),\n      s: ethUtil.toBuffer(json.s)\n    };\n\n    const tx = new Transaction(options, type);\n    tx._hash = json.hash ? Buffer.from(ethUtil.stripHexPrefix(json.hash), \"hex\") : null;\n    return tx;\n  }\n\n  /**\n   * Encodes the Transaction in order to be used in a database. Can be decoded\n   * into an identical Transaction via `Transaction.decode(encodedTx)`.\n   */\n  encode() {\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(this.hash()),\n      nonce: to.nullableRpcQuantityHexString(this.nonce) || \"0x\",\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.nullableRpcQuantityHexString(this.value),\n      gas: to.nullableRpcQuantityHexString(this.gasLimit),\n      gasPrice: to.nullableRpcQuantityHexString(this.gasPrice),\n      data: this.data ? this.data.toString(\"hex\") : null,\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcDataHexString(this.r),\n      s: to.nullableRpcDataHexString(this.s),\n      _type: this.type\n    };\n    return resultJSON;\n  }\n\n  isFake() {\n    return (this.type & Transaction.types.fake) === Transaction.types.fake;\n  }\n\n  isSigned() {\n    return (this.type & Transaction.types.signed) === Transaction.types.signed;\n  }\n\n  /**\n   * Compares the transaction's nonce value to the given expectedNonce taking in\n   * to account the type of transaction and comparison rules for each type.\n   *\n   * In a signed transaction a nonce of Buffer([]) is the same as Buffer([0]),\n   * but in a fake transaction Buffer([]) is null and Buffer([0]) is 0.\n   *\n   * @param {Buffer} expectedNonce The value of the from account's next nonce.\n   */\n  validateNonce(expectedNonce) {\n    let nonce;\n    if (this.isSigned() && this.nonce.length === 0) {\n      nonce = BUFFER_ZERO;\n    } else {\n      nonce = this.nonce;\n    }\n    return nonce.equals(expectedNonce);\n  }\n\n  /**\n   * Signs the transaction and sets the `type` bit for `signed` to 1,\n   * i.e., `isSigned() === true`\n   */\n  sign() {\n    sign.apply(this, arguments);\n    this.type |= Transaction.types.signed;\n  }\n\n  /**\n   * Returns a JSON-RPC spec compliant representation of this Transaction.\n   *\n   * @param {Object} block The block this Transaction appears in.\n   */\n  toJsonRpc(block) {\n    const hash = this.hash();\n\n    let transactionIndex = null;\n    for (let i = 0, txns = block.transactions, l = txns.length; i < l; i++) {\n      if (txns[i].hash().equals(hash)) {\n        transactionIndex = i;\n        break;\n      }\n    }\n\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(hash),\n      nonce: to.rpcQuantityHexString(this.nonce),\n      blockHash: to.nullableRpcDataHexString(block.hash()),\n      blockNumber: to.nullableRpcQuantityHexString(block.header.number),\n      transactionIndex: to.nullableRpcQuantityHexString(transactionIndex),\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.rpcQuantityHexString(this.value),\n      gas: to.rpcQuantityHexString(this.gasLimit),\n      gasPrice: to.rpcQuantityHexString(this.gasPrice),\n      input: to.rpcDataHexString(this.data),\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcDataHexString(this.r),\n      s: to.nullableRpcDataHexString(this.s)\n    };\n\n    return resultJSON;\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   *\n   * This method is nearly identical to ethereumjs-tx hash with the exception of\n   * the v,r,s value setting when _chainId > 0. Because the `_chainId` in our\n   * implementation is calculated whenever the v is updated we have to make sure\n   * we don't recalc the chainId when we set the v to soemthing else.\n   *\n   * Note: If the transaction is a fake transaction this hash method gets\n   * overridden in the constructor.\n   *\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n  hash(includeSignature = true) {\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    let items;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      // cache the chainId here\n      const chainId = this._chainId;\n      if (chainId > 0) {\n        const cacheRaw = this.raw.slice();\n        // Setting `this.v` changes the value of `this._chainId`\n        this.v = chainId;\n        this.r = 0;\n        this.s = 0;\n\n        items = this.raw;\n        this.raw = cacheRaw;\n        // set the chainId back to its original value here.\n        this._chainId = chainId;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  }\n};\n","module.exports = require(\"ethereumjs-block\");","var to = require(\"./to.js\");\n\n// Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function(key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function() {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\"\n  };\n};\n\nmodule.exports = Log;\n","var to = require(\"./to\");\n\nfunction Receipt(tx, block, logs, gasUsed, cumulativeGasUsed, contractAddress, status, logsBloom) {\n  this.tx = tx;\n  this.block = block;\n  this.logs = logs;\n  this.gasUsed = gasUsed;\n  this.cumulativeGasUsed = cumulativeGasUsed;\n  this.contractAddress = contractAddress;\n  this.status = status;\n  this.logsBloom = logsBloom;\n\n  this.transactionIndex = 0;\n\n  this.txHash = tx.hash();\n\n  for (var i = 0; i < block.transactions.length; i++) {\n    var current = block.transactions[i];\n    if (current.hash().equals(this.txHash)) {\n      this.transactionIndex = i;\n      break;\n    }\n  }\n}\n\nReceipt.prototype.toJSON = function() {\n  // Enforce Hex formatting as defined in the RPC spec.\n  return {\n    transactionHash: to.rpcDataHexString(this.txHash),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    from: to.rpcDataHexString(this.tx.from),\n    to: to.nullableRpcDataHexString(this.tx.to),\n    gasUsed: to.rpcQuantityHexString(this.gasUsed),\n    cumulativeGasUsed: to.rpcQuantityHexString(this.cumulativeGasUsed),\n    contractAddress: this.contractAddress != null ? to.rpcDataHexString(this.contractAddress) : null,\n    logs: this.logs.map(function(log) {\n      return log.toJSON();\n    }),\n    status: to.rpcQuantityHexString(this.status),\n    logsBloom: to.rpcDataHexString(this.logsBloom),\n    v: to.rpcDataHexString(this.tx.v),\n    r: to.rpcDataHexString(this.tx.r),\n    s: to.rpcDataHexString(this.tx.s)\n  };\n};\n\nmodule.exports = Receipt;\n","class LevelUpOutOfRangeError extends Error {\n  constructor(type, index, len) {\n    const message = \"LevelUpArrayAdapter named '\" + type + \"' index out of range: index \" + index + \"; length: \" + len;\n    super(message);\n    this.name = `${this.constructor.name}:${type}`;\n    this.type = type;\n  }\n}\n\nclass BlockOutOfRangeError extends LevelUpOutOfRangeError {\n  constructor(index, len) {\n    super(\"blocks\", index, len);\n  }\n}\n\nmodule.exports = {\n  LevelUpOutOfRangeError,\n  BlockOutOfRangeError\n};\n","module.exports = require(\"events\");","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar version = require('../package.json').version;\nvar core = require('web3-core');\nvar Eth = require('web3-eth');\nvar Net = require('web3-net');\nvar Personal = require('web3-eth-personal');\nvar Shh = require('web3-shh');\nvar Bzz = require('web3-bzz');\nvar utils = require('web3-utils');\n\nvar Web3 = function Web3() {\n    var _this = this;\n\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n\n    this.version = version;\n    this.utils = utils;\n\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function (provider, net) {\n        setProvider.apply(_this, arguments);\n\n        this.eth.setProvider(provider, net);\n        this.shh.setProvider(provider, net);\n        this.bzz.setProvider(provider);\n\n        return true;\n    };\n};\n\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\n\ncore.addProviders(Web3);\n\nmodule.exports = Web3;\n\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nlet ProviderEngine = require(\"web3-provider-engine\");\nlet SubscriptionSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nlet RequestFunnel = require(\"./subproviders/requestfunnel\");\nlet DelayedBlockFilter = require(\"./subproviders/delayedblockfilter\");\nlet GethDefaults = require(\"./subproviders/gethdefaults\");\nlet GethApiDouble = require(\"./subproviders/geth_api_double\");\n\nlet BlockTracker = require(\"./block_tracker\");\n\nlet RuntimeError = require(\"./utils/runtimeerror\");\nlet EventEmitter = require(\"events\");\n\nlet _ = require(\"lodash\");\n\nfunction Provider(options) {\n  const self = this;\n  EventEmitter.call(this);\n\n  this.options = options = self._applyDefaultOptions(options || {});\n\n  let gethApiDouble = new GethApiDouble(options, this);\n\n  this.engine = new ProviderEngine({\n    blockTracker: new BlockTracker({ blockchain: gethApiDouble.state.blockchain })\n  });\n\n  let subscriptionSubprovider = new SubscriptionSubprovider();\n\n  this.engine.manager = gethApiDouble;\n  this.engine.addProvider(new RequestFunnel());\n  this.engine.addProvider(new DelayedBlockFilter());\n  this.engine.addProvider(subscriptionSubprovider);\n  this.engine.addProvider(new GethDefaults());\n  this.engine.addProvider(gethApiDouble);\n\n  this.engine.setMaxListeners(100);\n  this.engine.start();\n\n  this.manager = gethApiDouble;\n  this.sendAsync = this.send.bind(this);\n  this.send = this.send.bind(this);\n  this.close = this.close.bind(this);\n  this._queueRequest = this._queueRequest.bind(this);\n  this._processRequestQueue = this._processRequestQueue.bind(this);\n\n  subscriptionSubprovider.on(\"data\", function(err, notification) {\n    self.emit(\"data\", err, notification);\n  });\n}\n\nconst defaultOptions = {\n  vmErrorsOnRPCResponse: true,\n  verbose: false,\n  asyncRequestProcessing: false,\n  logger: {\n    log: function() {}\n  }\n};\n\nProvider.prototype = Object.create(EventEmitter.prototype);\nProvider.prototype.constructor = Provider;\n\nProvider.prototype._applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n\nProvider.prototype.send = function(payload, callback) {\n  if (typeof callback !== \"function\") {\n    throw new Error(\n      \"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n        \"is no longer synchronous and must be passed a callback as its final argument.\"\n    );\n  }\n\n  let self = this;\n\n  let externalize = function(payload) {\n    return _.cloneDeep(payload);\n  };\n\n  if (Array.isArray(payload)) {\n    payload = payload.map(externalize);\n  } else {\n    payload = externalize(payload);\n  }\n\n  let intermediary = function(err, result) {\n    // clone result so that we can mutate the response without worrying about\n    // that messing up assumptions the calling logic might have about us\n    // mutating things\n    result = _.cloneDeep(result);\n    let response;\n    if (Array.isArray(result)) {\n      response = [];\n      for (let i = 0; i < result.length; i++) {\n        response.push(self.reportErrorInResponse(payload[i], err, result[i]));\n      }\n    } else {\n      response = self.reportErrorInResponse(payload, err, result);\n    }\n\n    if (self.options.verbose) {\n      self.options.logger.log(\n        \" <   \" +\n          JSON.stringify(response, null, 2)\n            .split(\"\\n\")\n            .join(\"\\n <   \")\n      );\n    }\n    process.nextTick(() => callback(response.error ? err : null, response));\n  };\n\n  if (self.options.verbose) {\n    self.options.logger.log(\n      \"   > \" +\n        JSON.stringify(payload, null, 2)\n          .split(\"\\n\")\n          .join(\"\\n   > \")\n    );\n  }\n\n  if (self.options.asyncRequestProcessing) {\n    self.engine.sendAsync(payload, intermediary);\n  } else {\n    self._queueRequest(payload, intermediary);\n  }\n};\n\nProvider.prototype.close = function(callback) {\n  // This is a little gross reaching, but...\n  this.manager.state.stopMining();\n  this.manager.state.blockchain.close(callback);\n  this.engine.stop();\n};\n\nProvider.prototype._queueRequest = function(payload, intermediary) {\n  if (!this._requestQueue) {\n    this._requestQueue = [];\n  }\n\n  this._requestQueue.push({\n    payload: payload,\n    callback: intermediary\n  });\n\n  setImmediate(this._processRequestQueue);\n};\n\nProvider.prototype._processRequestQueue = function() {\n  const self = this;\n\n  if (self._requestInProgress) {\n    return;\n  }\n\n  self._requestInProgress = true;\n\n  let args = self._requestQueue.shift();\n\n  if (args) {\n    self.engine.sendAsync(args.payload, (err, result) => {\n      if (self._requestQueue.length > 0) {\n        setImmediate(self._processRequestQueue);\n      }\n      args.callback(err, result);\n      self._requestInProgress = false;\n    });\n  } else {\n    // still need to free the lock\n    self._requestInProgress = false;\n\n    if (self._requestQueue.length > 0) {\n      setImmediate(self._processRequestQueue);\n    }\n  }\n};\n\nProvider.prototype.cleanUpErrorObject = function(err, response) {\n  // Our response should already have an error field at this point, if it\n  // doesn't, this was likely intentional. If not, this is the wrong place to\n  // fix that problem.\n  if (!err || !response.error) {\n    return response;\n  }\n\n  let errorObject = {\n    error: {\n      data: {}\n    }\n  };\n\n  if (err.message) {\n    // clean up the error reporting done by the provider engine so the error message isn't lost in the stack trace noise\n    errorObject.error.message = err.message;\n    errorObject.error.data.stack = err.stack;\n    errorObject.error.data.name = err.name;\n  } else if (!response.error) {\n    errorObject.error = {\n      message: err.toString()\n    };\n  }\n\n  return _.merge(response, errorObject);\n};\n\n// helper list of RPC methods which execute code and respond with a transaction hash as their result\nlet transactionMethods = [\"eth_sendTransaction\", \"eth_sendRawTransaction\", \"personal_sendTransaction\"];\n\nProvider.prototype._isTransactionRequest = function(request) {\n  return transactionMethods.indexOf(request.method) !== -1;\n};\n\nProvider.prototype.reportErrorInResponse = function(request, err, response) {\n  const self = this;\n\n  if (!err) {\n    return response;\n  }\n\n  // TODO: for next major release: move reporting of tx hash on error to error\n  // field to prevent poorly-written clients which assume that the existence of\n  // the \"result\" field implies no errors from breaking.\n  if (self._isTransactionRequest(request)) {\n    if (err instanceof RuntimeError) {\n      // Make sure we always return the transaction hash on failed transactions so\n      // the caller can get their tx receipt. This breaks JSONRPC 2.0, but it's how\n      // we've always done it.\n      response.result = err.hashes[0];\n\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        delete response.error;\n      }\n    }\n  }\n\n  if (request.method === \"eth_call\") {\n    if (err instanceof RuntimeError) {\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        response.result = err.results[err.hashes[0]].return || \"0x\";\n        delete response.error;\n      }\n    }\n  }\n\n  return self.cleanUpErrorObject(err, response);\n};\n\nmodule.exports = Provider;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar scryptsy = require('scrypt.js');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction decipherBuffer(decipher, data) {\n  return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = crypto.randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(crypto.randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = crypto.randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || crypto.randomBytes(32);\n  var iv = opts.iv || crypto.randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || crypto.randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.sha3(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext, 'hex');\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = decipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.sha3(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","var to = require(\"./utils/to.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./utils/log\");\nvar Receipt = require(\"./utils/receipt\");\nvar VM = require(\"ethereumjs-vm-coverage\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Trie = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar async = require(\"async\");\nvar Heap = require(\"heap\");\nvar Database = require(\"./database\");\nvar EventEmitter = require(\"events\");\nvar _ = require(\"lodash\");\nvar promisify = require(\"util\").promisify;\n\nfunction BlockchainDouble(options) {\n  var self = this;\n  EventEmitter.apply(self);\n\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  this.logger = options.logger || console;\n\n  this.data = new Database(options);\n\n  if (options.trie != null && options.db_path != null) {\n    throw new Error(\"Can't initialize a TestRPC with a db and a custom trie.\");\n  }\n\n  this.pending_transactions = [];\n\n  // updated periodically to keep up with the times\n  this.blockGasLimit = options.gasLimit;\n  this.defaultTransactionGasLimit = options.defaultTransactionGasLimit;\n  this.timeAdjustment = 0;\n}\n\nconst defaultOptions = {\n  gasLimit: \"0x6691b7\",\n  defaultTransactionGasLimit: \"0x15f90\",\n  time: null,\n  debug: false,\n  hardfork: \"petersburg\",\n  allowUnlimitedContractSize: false,\n  emitFreeLogs: false\n};\n\n// inheritence w/ prototype chaining\nBlockchainDouble.prototype = Object.create(EventEmitter.prototype);\nBlockchainDouble.prototype.constructor = BlockchainDouble;\n\nBlockchainDouble.prototype._applyDefaultOptions = function(options) {\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nBlockchainDouble.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.data.initialize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      var options = self.options;\n\n      var root = null;\n\n      if (block) {\n        root = block.header.stateRoot;\n      }\n\n      // I haven't yet found a good way to do this. Getting the trie from the\n      // forked blockchain without going through the other setup is a little gross.\n      self.stateTrie = self.createStateTrie(self.data.trie_db, root);\n\n      self.vm = options.vm || self.createVMFromStateTrie(self.stateTrie, true);\n\n      if (options.time) {\n        self.setTime(options.time);\n      }\n\n      // If we already have a block, then that means there's an existing chain.\n      // Don't create a genesis block.\n      if (block) {\n        self.emit(\"block\", block);\n        return callback();\n      }\n\n      self.createGenesisBlock(function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        accounts = accounts || [];\n\n        self.vm.stateManager.checkpoint(() => {\n          async.eachSeries(\n            accounts,\n            function(accountData, finished) {\n              self.vm.stateManager.putAccount(utils.toBuffer(accountData.address), accountData.account, finished);\n            },\n            function(err) {\n              if (err) {\n                return callback(err);\n              }\n\n              self.vm.stateManager.commit(() => {\n                // Create first block\n                self.putBlock(block, [], [], callback);\n              });\n            }\n          );\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.createVMFromStateTrie = function(state, activatePrecompiles) {\n  const self = this;\n  const vm = new VM({\n    state: state,\n    blockchain: {\n      // EthereumJS VM needs a blockchain object in order to get block information.\n      // When calling getBlock() it will pass a number that's of a Buffer type.\n      // Unfortunately, it uses a 64-character buffer (when converted to hex) to\n      // represent block numbers as well as block hashes. Since it's very unlikely\n      // any block number will get higher than the maximum safe Javascript integer,\n      // we can convert this buffer to a number ahead of time before calling our\n      // own getBlock(). If the conversion succeeds, we have a block number.\n      // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)\n      getBlock: function(number, done) {\n        try {\n          number = to.number(number);\n        } catch (e) {\n          // Do nothing; must be a block hash.\n        }\n\n        self.getBlock(number, done);\n      }\n    },\n    activatePrecompiles: activatePrecompiles || false,\n    hardfork: self.options.hardfork,\n    allowUnlimitedContractSize: self.options.allowUnlimitedContractSize,\n    emitFreeLogs: this.options.emitFreeLogs\n  });\n\n  if (self.options.debug === true) {\n    // log executed opcodes, including args as hex\n    vm.on(\"step\", function(info) {\n      var name = info.opcode.name;\n      var argsNum = info.opcode.in;\n      if (argsNum) {\n        var args = info.stack\n          .slice(-argsNum)\n          .map((arg) => to.hex(arg))\n          .join(\" \");\n\n        self.logger.log(`${name} ${args}`);\n      } else {\n        self.logger.log(name);\n      }\n    });\n  }\n\n  return vm;\n};\n\nBlockchainDouble.prototype.createStateTrie = function(db, root) {\n  return new Trie(db, root);\n};\n\n// Overrideable so other implementations (forking) can edit it.\nBlockchainDouble.prototype.createGenesisBlock = function(callback) {\n  this.createBlock(callback);\n};\n\nBlockchainDouble.prototype.latestBlock = function(callback) {\n  this.data.blocks.last(function(err, last) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, last);\n  });\n};\n\n// number accepts number (integer, hex) or tag (e.g., \"latest\")\nBlockchainDouble.prototype.getEffectiveBlockNumber = function(number, callback) {\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number\n  if (number.indexOf(\"0x\") >= 0) {\n    return callback(null, to.number(number));\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.getHeight(callback);\n    } else if (number === \"earliest\") {\n      return callback(null, 0);\n    }\n  }\n};\n\n// number accepts number (integer, hex), tag (e.g., \"latest\") or block hash\n// This function is used by ethereumjs-vm-coverage\nBlockchainDouble.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number or a block hash\n  if (number.indexOf(\"0x\") >= 0) {\n    var hash = number;\n\n    // block hash\n    if (hash.length > 40) {\n      this.data.blockHashes.get(to.hex(hash), function(err, blockIndex) {\n        if (err) {\n          return callback(err);\n        }\n        return self.data.blocks.get(blockIndex, callback);\n      });\n    } else {\n      // Block number\n      return this.data.blocks.get(to.number(hash), callback);\n    }\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.latestBlock(callback);\n    } else if (number === \"earliest\") {\n      return this.data.blocks.first(callback);\n    } else {\n      process.nextTick(callback, new Error(\"Invalid `blockNumber`: \\\"\" + number + \"\\\"\"));\n    }\n  }\n};\n\nBlockchainDouble.prototype.putBlock = function(block, logs, receipts, callback) {\n  var self = this;\n\n  // Lock in the state root for this block.\n  block.header.stateRoot = this.stateTrie.root;\n\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var requests = [\n      self.data.blocks.push.bind(self.data.blocks, block),\n      self.data.blockLogs.push.bind(self.data.blockLogs, logs),\n      self.data.blockHashes.set.bind(self.data.blockHashes, to.hex(block.hash()), length)\n    ];\n\n    block.transactions.forEach(function(tx, index) {\n      var txHash = to.hex(tx.hash());\n      requests.push(\n        self.data.transactions.set.bind(self.data.transactions, txHash, tx),\n        self.data.transactionReceipts.set.bind(self.data.transactionReceipts, txHash, receipts[index])\n      );\n    });\n\n    async.parallel(requests, (err, result) => {\n      if (!err) {\n        self.emit(\"block\", block);\n      }\n      callback(err, result);\n    });\n  });\n};\n\nBlockchainDouble.prototype.popBlock = function(callback) {\n  var self = this;\n\n  this.data.blocks.last(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    if (block == null) {\n      return callback(null, null);\n    }\n\n    var requests = [];\n    var blockHash = to.hex(block.hash());\n\n    block.transactions.forEach(function(tx) {\n      var txHash = to.hex(tx.hash());\n\n      requests.push(\n        self.data.transactions.del.bind(self.data.transactions, txHash),\n        self.data.transactionReceipts.del.bind(self.data.transactionReceipts, txHash)\n      );\n    });\n\n    requests.push(\n      self.data.blockLogs.pop.bind(self.data.blockLogs),\n      self.data.blockHashes.del.bind(self.data.blockHashes, blockHash),\n      self.data.blocks.pop.bind(self.data.blocks) // Do this one last in case anything relies on it.\n    );\n\n    async.series(requests, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Set the root to the last available, which will \"roll back\" to the previous\n      // moment in time. Note that all the old data is still in the db, but it's now just junk data.\n      self.data.blocks.last(function(err, newLastBlock) {\n        if (err) {\n          return callback(err);\n        }\n        // using setStateRoot because in the future it will automatically take care\n        // of clearing the cache for us.\n        // note setStateRoot checks for checkpoints, and if there are any, it will fail.\n        // At time of writing this comment, the only time there could be a checkpoint\n        // is in the middle of a vm.runBlock call. Once asyncRequestProcessing is reenabled\n        // this will likely cause problems.\n        self.vm.stateManager.setStateRoot(newLastBlock.header.stateRoot, function(err) {\n          // remove this `._storageTries = {}` statement once https://github.com/ethereumjs/ethereumjs-vm-coverage/pull/445\n          // is in a release, probably in ejs-vm 2.6.1\n          if (!err) {\n            self.vm.stateManager._storageTries = {};\n          }\n          // Remember: Return block we popped off.\n          callback(err, block);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.clearPendingTransactions = function() {\n  this.pending_transactions = [];\n};\n\n/**\n * createBlock\n *\n * Create a new block, where the parent's block is either the latest block\n * on the chain or the parent block passed in.\n *\n * @param  {Block}   parent   The block meant to be the parent block (optional)\n * @param  {Function} callback Callback function called after block is created\n * @return Block              The block created.\n */\nBlockchainDouble.prototype.createBlock = function(parent, callback) {\n  var self = this;\n\n  if (typeof parent === \"function\") {\n    callback = parent;\n    parent = null;\n  }\n\n  var block = new Block();\n\n  function getParent(callback) {\n    if (parent) {\n      return callback(null, parent);\n    } else {\n      self.latestBlock(callback);\n    }\n  }\n\n  getParent(function(err, parent) {\n    if (err) {\n      return callback(err);\n    }\n\n    var parentNumber = parent != null ? to.number(parent.header.number) : -1;\n\n    block.header.gasLimit = self.blockGasLimit;\n\n    // Ensure we have the right block number for the VM.\n    block.header.number = to.hex(parentNumber + 1);\n\n    // Set the timestamp before processing txs\n    block.header.timestamp = to.hex(self.currentTime());\n\n    if (parent != null) {\n      block.header.parentHash = to.hex(parent.hash());\n    }\n\n    callback(null, block);\n  });\n};\n\nBlockchainDouble.prototype.getQueuedNonce = function(address, callback) {\n  var nonce = null;\n  var addressBuffer = to.buffer(address);\n  this.pending_transactions.forEach(function(tx) {\n    if (!tx.from.equals(addressBuffer)) {\n      return;\n    }\n\n    var pendingNonce = to.number(tx.nonce) || 0;\n    // If this is the first queued nonce for this address we found,\n    // or it's higher than the previous highest, note it.\n    if (nonce === null || pendingNonce > nonce) {\n      nonce = pendingNonce;\n    }\n  });\n\n  // If we found a queued transaction nonce, return one higher\n  // than the highest we found\n  if (nonce != null) {\n    return callback(null, Buffer.from([nonce + 1]));\n  }\n  this.stateTrie.get(addressBuffer, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n\n    var account = new Account(val);\n    // nonces are initiallized as an empty buffer, which isn't what we want.\n    callback(null, account.nonce.length === 0 ? Buffer.from([0]) : account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.queueTransaction = function(tx) {\n  this.pending_transactions.push(tx);\n};\n\nBlockchainDouble.prototype.sortByPriceAndNonce = function() {\n  // Sorts transactions like I believe geth does.\n  // See the description of 'SortByPriceAndNonce' at\n  // https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/types/transaction.go\n  var self = this;\n  var sortedByNonce = {};\n\n  self.pending_transactions.forEach((tx) => {\n    const from = tx.from.toString(\"hex\");\n    const arr = sortedByNonce[from];\n    if (arr) {\n      arr.push(tx);\n    } else {\n      sortedByNonce[from] = [tx];\n    }\n  });\n\n  var priceSort = function(a, b) {\n    return parseInt(to.hex(b.gasPrice), 16) - parseInt(to.hex(a.gasPrice), 16);\n  };\n  var nonceSort = function(a, b) {\n    return parseInt(to.hex(a.nonce), 16) - parseInt(to.hex(b.nonce), 16);\n  };\n\n  // Now sort each address by nonce\n  Object.keys(sortedByNonce).forEach((address) => {\n    sortedByNonce[address].sort(nonceSort);\n  });\n\n  // Initialise a heap, sorted by price, for the head transaction from each account.\n  var heap = new Heap(priceSort);\n  Object.keys(sortedByNonce).forEach((address) => {\n    heap.push(sortedByNonce[address].shift());\n  });\n\n  // Now reorder our transactions. Compare the next transactions from each account, and choose\n  // the one with the highest gas price.\n  const sortedTransactions = [];\n  while (heap.size() > 0) {\n    const best = heap.pop();\n    let address = best.from.toString(\"hex\");\n    if (sortedByNonce[address].length > 0) {\n      // Push on the next transaction from this account\n      heap.push(sortedByNonce[address].shift());\n    }\n    sortedTransactions.push(best);\n  }\n  self.pending_transactions = sortedTransactions;\n};\n\nBlockchainDouble.prototype.processCall = function(tx, blockNumber, callback) {\n  var self = this;\n\n  var runCall = function(tx, err, parentBlock) {\n    if (err) {\n      return callback(err);\n    }\n\n    // create a fake block with this fake transaction\n    self.createBlock(parentBlock, function(err, newBlock) {\n      if (err) {\n        return callback(err);\n      }\n      newBlock.transactions.push(tx);\n\n      var runArgs = {\n        tx: tx,\n        block: newBlock,\n        skipBalance: true,\n        skipNonce: true\n      };\n\n      var stateTrie = self.createStateTrie(self.data.trie_db, parentBlock.header.stateRoot);\n      var vm = self.createVMFromStateTrie(stateTrie);\n\n      vm.runTx(runArgs, function(vmerr, result) {\n        // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n        if (vmerr && vmerr instanceof Error === false) {\n          vmerr = new Error(\"VM error: \" + vmerr);\n        }\n\n        // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n        if (vmerr) {\n          return callback(vmerr, err);\n        }\n\n        // If no error, check for a runtime error. This can return null if no runtime error.\n        vmerr = RuntimeError.fromResults([tx], { results: [result] });\n\n        callback(vmerr, result);\n      });\n    });\n  };\n\n  // Delegate block selection\n  if (blockNumber === \"latest\") {\n    self.latestBlock(runCall.bind(null, tx));\n  } else {\n    self.getBlock(blockNumber, runCall.bind(null, tx));\n  }\n};\n\n/**\n * processBlock\n *\n * Process the passed in block and included transactions\n *\n * @param  {VM} vm             the vm to use when running the block\n * @param  {Block} block       block to process\n * @param  {Boolean} commit    Whether or not changes should be committed to the state\n * trie and the block appended to the end of the chain.\n * @param  {Function} callback Callback function when transaction processing is completed.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processBlock = function(vm, block, commit, callback) {\n  var self = this;\n\n  if (typeof commit === \"function\") {\n    callback = commit;\n    commit = true;\n  }\n\n  vm.runBlock(\n    {\n      block: block,\n      generate: true,\n      skipBlockValidation: true\n    },\n    async function(vmerr, results) {\n      // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n      if (vmerr && vmerr instanceof Error === false) {\n        vmerr = new Error(\"VM error: \" + vmerr);\n      }\n\n      // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n      if (vmerr) {\n        callback(vmerr);\n        return;\n      }\n\n      // If no error, check for a runtime error. This can return null if no runtime error.\n      vmerr = RuntimeError.fromResults(block.transactions, results);\n\n      // Note, even if we have an error, some transactions may still have succeeded.\n      // Process their logs if so, returning the error at the end.\n\n      var logs = [];\n      var receipts = [];\n\n      var totalBlockGasUsage = 0;\n\n      results.results.forEach(function(result) {\n        totalBlockGasUsage += to.number(result.gasUsed);\n      });\n\n      block.header.gasUsed = utils.toBuffer(to.hex(totalBlockGasUsage));\n\n      const txTrie = new Trie();\n      const rcptTrie = new Trie();\n      const promises = [];\n      const putInTrie = (trie, key, val) => promisify(trie.put.bind(trie))(key, val);\n\n      for (var v = 0; v < results.receipts.length; v++) {\n        var result = results.results[v];\n        var receipt = results.receipts[v];\n        var tx = block.transactions[v];\n        var txHash = tx.hash();\n        var txLogs = [];\n\n        // Only process the transaction's logs if it didn't error.\n        if (result.vm.exception === 1) {\n          for (var i = 0; i < receipt.logs.length; i++) {\n            var receiptLog = receipt.logs[i];\n            var address = to.hex(receiptLog[0]);\n            var topics = [];\n\n            for (var j = 0; j < receiptLog[1].length; j++) {\n              topics.push(to.hex(receiptLog[1][j]));\n            }\n\n            var data = to.hex(receiptLog[2]);\n\n            var log = new Log({\n              logIndex: to.hex(i),\n              transactionIndex: to.hex(v),\n              transactionHash: txHash,\n              block: block,\n              address: address,\n              data: data,\n              topics: topics,\n              type: \"mined\"\n            });\n\n            logs.push(log);\n            txLogs.push(log);\n          }\n        }\n\n        let rcpt = new Receipt(\n          tx,\n          block,\n          txLogs,\n          result.gasUsed.toArrayLike(Buffer),\n          receipt.gasUsed,\n          result.createdAddress,\n          receipt.status,\n          to.hex(receipt.bitvector)\n        );\n        receipts.push(rcpt);\n\n        const rawReceipt = [receipt.status, receipt.gasUsed, receipt.bitvector, receipt.logs];\n        const rcptBuffer = utils.rlp.encode(rawReceipt);\n        const key = utils.rlp.encode(v);\n        promises.push(putInTrie(txTrie, key, tx.serialize()));\n        promises.push(putInTrie(rcptTrie, key, rcptBuffer));\n      }\n      await Promise.all(promises);\n\n      block.header.transactionsTrie = utils.toBuffer(txTrie.root);\n      block.header.receiptTrie = utils.toBuffer(rcptTrie.root);\n\n      if (commit) {\n        // Put that block on the end of the chain\n        self.putBlock(block, logs, receipts, done);\n      } else {\n        done();\n      }\n\n      function done(e) {\n        if (e) {\n          return callback(e);\n        }\n        // Note we return the vm err here too, if it exists.\n        callback(vmerr, block.transactions, results);\n      }\n    }\n  );\n};\n\n/**\n * processNextBlock\n *\n * Process the next block like a normal blockchain, pulling from the list of\n * pending transactions.\n *\n * @param  {number} timestamp at which the block is mined\n * @param  {Function} callback Callback when transaction processing is finished.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processNextBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n\n  self.sortByPriceAndNonce();\n\n  // Grab only the transactions that can fit within the block\n  var currentTransactions = [];\n  var totalGasLimit = 0;\n  var maxGasLimit = to.number(self.blockGasLimit);\n\n  while (self.pending_transactions.length > 0) {\n    var tx = self.pending_transactions[0];\n    var gasLimit = to.number(tx.gasLimit);\n\n    if (totalGasLimit + gasLimit <= maxGasLimit) {\n      totalGasLimit += gasLimit;\n      self.pending_transactions.shift();\n      currentTransactions.push(tx);\n    } else {\n      // Next one won't fit. Break.\n      break;\n    }\n  }\n\n  // Remember, we ensured transactions had a valid gas limit when they were queued (in the state manager).\n  // If we run into a case where we can't process any because one is higher than the gas limit,\n  // then it's a serious issue. This should never happen, but let's check anyway.\n  if (currentTransactions.length === 0 && self.pending_transactions.length > 0) {\n    // Error like geth.\n    var error = \"Unexpected error condition: next transaction exceeds block gas limit\";\n    return callback(error);\n  }\n\n  // Create a new block meant to be the end of the chain\n  this.createBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // Overwrite block timestamp\n    if (timestamp) {\n      self.data.blocks.last(function(err, last) {\n        if (err) {\n          return callback(err);\n        }\n        if (last && to.number(last.header.timestamp) > timestamp) {\n          self.logger.log(\n            \"Waring: Setting the block timestamp (\" + timestamp + \") that is earlier than the parent block one.\"\n          );\n        }\n      });\n      block.header.timestamp = to.hex(timestamp);\n      self.setTime(new Date(timestamp * 1000));\n    }\n    // Add transactions to the block.\n    Array.prototype.push.apply(block.transactions, currentTransactions);\n\n    self.processBlock(self.vm, block, true, callback);\n  });\n};\n\n/**\n * processTransactionTrace\n *\n * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n * This will return the vm-level trace output for debugging purposes.\n *\n * Strategy:\n *\n *  1. Find block where transaction occurred\n *  2. Set state root of that block\n *  3. Rerun every transaction in that block prior to and including the requested transaction\n *  4. Send trace results back.\n *\n * @param  {[type]}   tx       [description]\n * @param  {Function} callback [description]\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processTransactionTrace = async function(hash, params, callback) {\n  const self = this;\n  const targetHash = to.hex(hash);\n  let txHashCurrentlyProcessing = \"\";\n  let txCurrentlyProcessing = null;\n  let vm;\n\n  let storageStack = {\n    currentDepth: -1,\n    stack: []\n  };\n\n  let returnVal = {\n    gas: 0,\n    returnValue: \"\",\n    structLogs: []\n  };\n\n  function stepListener(event, next) {\n    // See these docs:\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n\n    const gasLeft = to.number(event.gasLeft);\n    const totalGasUsedAfterThisStep = to.number(txCurrentlyProcessing.gasLimit) - gasLeft;\n    const gasUsedThisStep = totalGasUsedAfterThisStep - returnVal.gas;\n    returnVal.gas += gasUsedThisStep;\n\n    let memory = null;\n    if (!params.disableMemory) {\n      // Get memory and break it up into 32-byte words.\n      // Note we may possibly have to pad the final word.\n      memory = Buffer.from(event.memory).toString(\"hex\");\n      memory = memory.match(/.{1,64}/g) || [];\n\n      if (memory.length > 0) {\n        const lastItem = memory[memory.length - 1];\n        if (lastItem.length < 64) {\n          memory[memory.length - 1] = lastItem + new Array(64 - lastItem.length + 1).join(\"0\");\n        }\n      }\n    }\n\n    let stack = null;\n    if (!params.disableStack) {\n      stack = event.stack.map((item) => {\n        return to.rpcDataHexString(item, 64).replace(\"0x\", \"\"); // non-0x prefixed.\n      });\n    }\n\n    let structLog = {\n      depth: event.depth,\n      error: \"\",\n      gas: gasLeft,\n      gasCost: gasUsedThisStep,\n      memory,\n      op: event.opcode.name,\n      pc: event.pc,\n      stack,\n      storage: null\n    };\n\n    if (params.disableStorage) {\n      returnVal.structLogs.push(structLog);\n      next();\n    } else {\n      structLog = self.processStorageTrace(structLog, storageStack, event, vm, function(err, structLog) {\n        if (err) {\n          return next(err);\n        }\n        returnVal.structLogs.push(structLog);\n        next();\n      });\n    }\n  }\n\n  // #1 - get block via transaction receipt\n  this.getTransactionReceipt(targetHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!receipt) {\n      return callback(new Error(\"Unknown transaction \" + targetHash));\n    }\n\n    let targetBlock = receipt.block;\n\n    // Get the parent of the target block\n    self.getBlock(targetBlock.header.parentHash, function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      // #2 - Set state root of original block\n      var stateTrie = self.createStateTrie(self.data.trie_db, parent.header.stateRoot);\n      vm = self.createVMFromStateTrie(stateTrie);\n\n      // Prepare the \"next\" block with necessary transactions\n      self.createBlock(parent, function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        for (var i = 0; i < targetBlock.transactions.length; i++) {\n          var tx = targetBlock.transactions[i];\n          block.transactions.push(tx);\n\n          // After including the target transaction, that's all we need to do.\n          if (to.hex(tx.hash()) === targetHash) {\n            break;\n          }\n        }\n\n        function beforeTxListener(tx) {\n          txCurrentlyProcessing = tx;\n          txHashCurrentlyProcessing = to.hex(tx.hash());\n          if (txHashCurrentlyProcessing === targetHash) {\n            vm.on(\"step\", stepListener);\n          }\n        }\n\n        // afterTxListener cleans up everything.\n        function afterTxListener() {\n          if (txHashCurrentlyProcessing === targetHash) {\n            removeListeners();\n          }\n        }\n\n        function removeListeners() {\n          vm.removeListener(\"step\", stepListener);\n          vm.removeListener(\"beforeTx\", beforeTxListener);\n          vm.removeListener(\"afterTx\", afterTxListener);\n        }\n\n        // Listen to beforeTx and afterTx so we know when our target transaction\n        // is processing. These events will add the event listener for getting the trace data.\n        vm.on(\"beforeTx\", beforeTxListener);\n        vm.on(\"afterTx\", afterTxListener);\n\n        // #3 - Process the block without committing the data.\n        self.processBlock(vm, block, false, function(err) {\n          // Ignore runtime errors, or else erroneous transactions can't be traced.\n          if (err && err.message.indexOf(\"VM Exception\") === 0) {\n            err = null;\n          }\n\n          // Just to be safe\n          removeListeners();\n\n          // #4 - send state results back\n          callback(err, returnVal);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.processStorageTrace = function(structLog, storageStack, event, vm, callback) {\n  var name = event.opcode.name;\n\n  var argsNum = event.opcode.in;\n  var args = event.stack.slice(-argsNum).map((arg) => to.hex(arg));\n\n  if (storageStack.currentDepth > event.depth) {\n    storageStack.stack.pop();\n  }\n  if (storageStack.currentDepth < event.depth) {\n    storageStack.stack.push({});\n  }\n\n  storageStack.currentDepth = event.depth;\n\n  var key;\n  var value;\n  switch (name) {\n    case \"SSTORE\":\n      key = to.rpcDataHexString(args[1], 64).replace(\"0x\", \"\");\n      value = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n\n      callback(null, structLog);\n      // assign after callback because this storage change actually takes\n      // effect _after_ this opcode executes\n      storageStack.stack[storageStack.currentDepth][key] = value;\n      break;\n    case \"SLOAD\":\n      // this one's more fun, we need to get the value the contract is loading from current storage\n      key = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n\n      vm.stateManager.getContractStorage(event.address, \"0x\" + key, function(err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        value = to.rpcDataHexString(result, 64).replace(\"0x\", \"\");\n        storageStack.stack[storageStack.currentDepth][key] = value;\n        // use Object.assign to prevent future steps from overwriting this step's storage values\n        structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n        callback(null, structLog);\n      });\n      break;\n    default:\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n      callback(null, structLog);\n  }\n};\n\nBlockchainDouble.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      // Finally, put the stateRoot back for good\n      trie.root = currentStateRoot;\n\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      callback(null, account);\n    });\n  });\n};\n\nBlockchainDouble.prototype.getNonce = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.getBalance = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, account.balance);\n  });\n};\n\n// Note! Storage values are returned RLP encoded!\nBlockchainDouble.prototype.getStorage = function(address, position, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      trie.root = account.stateRoot;\n\n      trie.get(utils.setLengthLeft(utils.toBuffer(position), 32), function(err, value) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err != null) {\n          return callback(err);\n        }\n\n        callback(null, value);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.getCode(trie, function(err, code) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, code);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getTransaction = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.data.transactions.get(hash, function(err, tx) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, tx);\n  });\n};\n\nBlockchainDouble.prototype.getTransactionReceipt = function(hash, callback) {\n  hash = to.hex(hash);\n  const pendingTxs = this.pending_transactions;\n\n  for (var i = 0; i < pendingTxs.length; i++) {\n    let pendingTxHash = to.hex(pendingTxs[i].hash());\n    if (hash === pendingTxHash) {\n      return callback(null, { tx: pendingTxs[i] });\n    }\n  }\n\n  this.data.transactionReceipts.get(hash, function(err, receipt) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(err, receipt);\n  });\n};\n\nBlockchainDouble.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    self.data.blockLogs.get(effective, callback);\n  });\n};\n\nBlockchainDouble.prototype.getHeight = function(callback) {\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, length - 1);\n  });\n};\n\nBlockchainDouble.prototype.currentTime = function() {\n  return ((new Date().getTime() / 1000) | 0) + this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.increaseTime = function(seconds) {\n  if (seconds < 0) {\n    seconds = 0;\n  }\n  this.timeAdjustment += seconds;\n  return this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.setTime = function(date) {\n  var now = (new Date().getTime() / 1000) | 0;\n  var start = (date.getTime() / 1000) | 0;\n  this.timeAdjustment = start - now;\n};\n\nBlockchainDouble.prototype.close = function(callback) {\n  this.data.close(callback);\n};\n\nmodule.exports = BlockchainDouble;\n","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"level-sublevel\");","// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\n\nconst decode = function(json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n\n  // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type);\n\n  // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function(tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n","var inherits = require(\"util\").inherits;\n\n// raised when the transaction is rejected prior to running it in the EVM.\nfunction TXRejectedError(message) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n}\n\ninherits(TXRejectedError, Error);\n\nmodule.exports = TXRejectedError;\n","var to = require(\"./to\");\n\nmodule.exports = {\n  toJSON: function(block, includeFullTransactions) {\n    return {\n      number: to.rpcQuantityHexString(block.header.number),\n      hash: to.hex(block.hash()),\n      parentHash: to.hex(block.header.parentHash), // common.hash\n      mixHash: to.hex(block.header.mixHash),\n      nonce: to.rpcDataHexString(to.hex(block.header.nonce), 16),\n      sha3Uncles: to.hex(block.header.uncleHash),\n      logsBloom: to.hex(block.header.bloom),\n      transactionsRoot: to.hex(block.header.transactionsTrie),\n      stateRoot: to.hex(block.header.stateRoot),\n      receiptsRoot: to.hex(block.header.receiptTrie),\n      miner: to.hex(block.header.coinbase),\n      difficulty: to.rpcQuantityHexString(block.header.difficulty),\n      totalDifficulty: to.rpcQuantityHexString(block.header.difficulty), // TODO: Figure out what to do here.\n      extraData: to.rpcDataHexString(block.header.extraData),\n      size: to.hex(1000), // TODO: Do something better here\n      gasLimit: to.rpcQuantityHexString(block.header.gasLimit),\n      gasUsed: to.rpcQuantityHexString(block.header.gasUsed),\n      timestamp: to.rpcQuantityHexString(block.header.timestamp),\n      transactions: block.transactions.map(function(tx) {\n        if (includeFullTransactions) {\n          return tx.toJsonRpc(block);\n        } else {\n          return to.hex(tx.hash());\n        }\n      }),\n      uncles: [] // block.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n    };\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst Provider = require(\"./lib/provider\");\nconst Server = require(\"./lib/server\");\n\n// This interface exists so as not to cause breaking changes.\nmodule.exports = {\n  server: function(options) {\n    return Server.create(options);\n  },\n  provider: function(options) {\n    return new Provider(options);\n  },\n  _webpacked: true\n};\n","module.exports = require(\"web3-provider-engine\");","module.exports = require(\"web3-provider-engine/subproviders/subscriptions\");","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(RequestFunnel, Subprovider);\n\nmodule.exports = RequestFunnel;\n\n// See if any payloads for the specified methods are marked as external.\n// If they are external, and match the method list, process them one at\n// a time.\nfunction RequestFunnel() {\n  // We use an object here for O(1) lookups (speed).\n  this.methods = {\n    eth_call: true,\n    eth_getStorageAt: true,\n    eth_sendTransaction: true,\n    eth_sendRawTransaction: true,\n\n    // Ensure block filter and filter changes are process one at a time\n    // as well so filter requests that come in after a transaction get\n    // processed once that transaction has finished processing.\n    eth_newBlockFilter: true,\n    eth_getFilterChanges: true,\n    eth_getFilterLogs: true\n  };\n  this.queue = [];\n  this.isWorking = false;\n}\n\nRequestFunnel.prototype.handleRequest = function(payload, next, end) {\n  if (payload.external !== true || this.methods[payload.method] !== true) {\n    return next();\n  }\n\n  this.queue.push([payload, next]);\n\n  if (this.isWorking === false) {\n    this.processNext();\n  }\n};\n\nRequestFunnel.prototype.processNext = function() {\n  var self = this;\n\n  if (this.queue.length === 0) {\n    this.isWorking = false;\n    return;\n  }\n\n  this.isWorking = true;\n\n  var item = this.queue.shift();\n  var next = item[1];\n\n  next(function(error, request, cb) {\n    if (error) {\n      return cb(error);\n    }\n    cb();\n    self.processNext();\n  });\n};\n","// It's unforutnate we have to have this subprovider, but it's because\n// we instamine, and web3 isn't written in a way that supports instamining\n// (i.e., it sets up the filter after the transaction has been processed).\n// This block filter will ensure that each block filter will always see\n// the change from the last block to the current block.\n//\n// Note: An added benefit of this is that it shaves off a signifcant\n// amount of time from tests that use web3 and block filters.\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\nvar async = require(\"async\");\nvar to = require(\"../utils/to\");\n\ninherits(DelayedBlockFilter, Subprovider);\n\nmodule.exports = DelayedBlockFilter;\n\nfunction DelayedBlockFilter() {\n  this.watching = {};\n}\n\nDelayedBlockFilter.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method === \"eth_newBlockFilter\") {\n    return this.handleNewBlockFilter(payload, next, end);\n  }\n  if (payload.method === \"eth_getFilterChanges\") {\n    return this.handleGetFilterChanges(payload, next, end);\n  }\n\n  next();\n};\n\nDelayedBlockFilter.prototype.handleNewBlockFilter = function(payload, next, end) {\n  var self = this;\n\n  // Let this filter process and add it to our watch list.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n    self.watching[result] = true;\n    cb();\n  });\n};\n\nDelayedBlockFilter.prototype.handleGetFilterChanges = function(payload, next, end) {\n  var self = this;\n  var filterId = payload.params[0];\n\n  if (!this.watching[filterId]) {\n    return next();\n  }\n\n  // Get the changes, and then alter the result.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n\n    var currentBlockHash;\n    var previousBlockHash;\n    var blockNumber;\n\n    async.series(\n      [\n        function(c) {\n          // If we have a result, use it.\n          if (result.length !== 0) {\n            currentBlockHash = result[0];\n            c();\n          } else {\n            // Otherwise, get the current block number.\n            self.emitPayload(\n              {\n                method: \"eth_blockNumber\"\n              },\n              function(err, res) {\n                if (err) {\n                  return c(err);\n                }\n                blockNumber = to.number(res.result);\n                c();\n              }\n            );\n          }\n        },\n        function(c) {\n          // If we got a block number above, meaning, we didn't get a block hash,\n          // skip this step.\n          if (blockNumber) {\n            return c();\n          }\n\n          // If not skipped, then we got a block hash, and we need to get a block number from it.\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByHash\",\n              params: [currentBlockHash, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              blockNumber = to.number(res.result.number);\n              c();\n            }\n          );\n        },\n        function(c) {\n          // If we're at block 0, return no changes. See final function below.\n          blockNumber = to.number(blockNumber);\n          if (blockNumber === 0) {\n            previousBlockHash = undefined;\n            return c();\n          }\n\n          // If at this point, we do have a block number, so let's subtract one\n          // from it and get the block hash of the block before it.\n          blockNumber = blockNumber - 1;\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByNumber\",\n              params: [blockNumber, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              previousBlockHash = res.result.hash;\n              c();\n            }\n          );\n        }\n      ],\n      function(err) {\n        if (err) {\n          // Unfortunately the subprovider code doesn't let us return an error\n          // through the callback cb(). So we'll just ignore it.... (famous last words).\n        }\n\n        // If we got the previous block, use it. Otherwise do nothing.\n        // Then stop watching because we only want on getFilterChanges to react this way.\n        if (previousBlockHash) {\n          result[0] = previousBlockHash;\n        }\n\n        delete self.watching[filterId];\n        cb();\n      }\n    );\n  });\n};\n","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(GethDefaults, Subprovider);\n\nmodule.exports = GethDefaults;\n\nfunction GethDefaults() {}\n\n// Massage eth_estimateGas requests, setting default data (e.g., from) if\n// not specified. This is here specifically to make the testrpc\n// react like Geth.\nGethDefaults.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method !== \"eth_estimateGas\" && payload.method !== \"eth_call\") {\n    return next();\n  }\n\n  var params = payload.params[0];\n\n  if (params.from == null) {\n    this.emitPayload(\n      {\n        method: \"eth_coinbase\"\n      },\n      function(err, result) {\n        if (err) {\n          return end(err);\n        }\n\n        var coinbase = result.result;\n\n        params.from = coinbase;\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar StateManager = require(\"../statemanager.js\");\nvar to = require(\"../utils/to\");\nvar TXRejectedError = require(\"../utils/txrejectederror\");\n\nvar blockHelper = require(\"../utils/block_helper\");\nvar pkg = require(\"../../package.json\");\nconst { BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\n\ninherits(GethApiDouble, Subprovider);\n\nfunction GethApiDouble(options, provider) {\n  var self = this;\n\n  this.state = options.state || new StateManager(options, provider);\n  this.options = options;\n  this.initialized = false;\n\n  this.initialization_error = null;\n  this.post_initialization_callbacks = [];\n\n  this.state.initialize(function(err) {\n    if (err) {\n      self.initialization_error = err;\n    }\n    self.initialized = true;\n\n    var callbacks = self.post_initialization_callbacks;\n    self.post_initialization_callbacks = [];\n\n    callbacks.forEach(function(callback) {\n      setImmediate(function() {\n        callback(self.initialization_error, self.state);\n      });\n    });\n  });\n}\n\nGethApiDouble.prototype.waitForInitialization = function(callback) {\n  var self = this;\n  if (self.initialized === false) {\n    self.post_initialization_callbacks.push(callback);\n  } else {\n    callback(self.initialization_error, self.state);\n  }\n};\n\n// Function to not pass methods through until initialization is finished\nGethApiDouble.prototype.handleRequest = function(payload, next, end) {\n  var self = this;\n\n  if (self.initialization_error != null) {\n    return end(self.initialization_error);\n  }\n\n  if (self.initialized === false) {\n    self.waitForInitialization(self.getDelayedHandler(payload, next, end));\n    return;\n  }\n\n  var method = self[payload.method];\n\n  if (method == null) {\n    return end(new Error(\"Method \" + payload.method + \" not supported.\"));\n  }\n\n  var params = payload.params || [];\n  var args = [].concat(params);\n\n  var addedBlockParam = false;\n\n  if (self.requiresDefaultBlockParameter(payload.method) && args.length < method.length - 1) {\n    args.push(\"latest\");\n    addedBlockParam = true;\n  }\n\n  args.push(end);\n\n  // avoid crash by checking to make sure that we haven't specified too many arguments\n  if (\n    args.length > method.length ||\n    (method.minLength !== undefined && args.length < method.minLength) ||\n    (method.minLength === undefined && args.length < method.length)\n  ) {\n    var errorMessage = `Incorrect number of arguments. Method '${payload.method}' requires `;\n    if (method.minLength) {\n      errorMessage += `between ${method.minLength - 1} and ${method.length - 1} arguments. `;\n    } else {\n      errorMessage += `exactly ${method.length - 1} arguments. `;\n    }\n\n    if (addedBlockParam) {\n      errorMessage += \"Including the implicit block argument, r\";\n    } else {\n      // new sentence, capitalize it.\n      errorMessage += \"R\";\n    }\n    errorMessage += `equest specified ${args.length - 1} arguments: ${JSON.stringify(args)}.`;\n\n    return end(new Error(errorMessage));\n  }\n\n  method.apply(self, args);\n};\n\nGethApiDouble.prototype.getDelayedHandler = function(payload, next, end) {\n  var self = this;\n  return function(err, state) {\n    if (err) {\n      end(err);\n    }\n    self.handleRequest(payload, next, end);\n  };\n};\n\nGethApiDouble.prototype.requiresDefaultBlockParameter = function(method) {\n  // object for O(1) lookup.\n  var methods = {\n    eth_getBalance: true,\n    eth_getCode: true,\n    eth_getTransactionCount: true,\n    eth_getStorageAt: true,\n    eth_call: true,\n    eth_estimateGas: true\n  };\n\n  return methods[method] === true;\n};\n\n// Handle individual requests.\n\nGethApiDouble.prototype.eth_accounts = function(callback) {\n  callback(null, Object.keys(this.state.accounts));\n};\n\nGethApiDouble.prototype.eth_blockNumber = function(callback) {\n  this.state.blockNumber(function(err, result) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.hex(result));\n  });\n};\n\nGethApiDouble.prototype.eth_coinbase = function(callback) {\n  callback(null, this.state.coinbase);\n};\n\nGethApiDouble.prototype.eth_mining = function(callback) {\n  callback(null, this.state.is_mining);\n};\n\nGethApiDouble.prototype.eth_hashrate = function(callback) {\n  callback(null, \"0x0\");\n};\n\nGethApiDouble.prototype.eth_gasPrice = function(callback) {\n  callback(null, utils.addHexPrefix(this.state.gasPrice()));\n};\n\nGethApiDouble.prototype.eth_getBalance = function(address, blockNumber, callback) {\n  this.state.getBalance(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getCode = function(address, blockNumber, callback) {\n  this.state.getCode(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getBlockByNumber = function(blockNumber, includeFullTransactions, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, blockHelper.toJSON(block, includeFullTransactions));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockByHash = function(txHash, includeFullTransactions, callback) {\n  this.eth_getBlockByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByNumber = function(blockNumber, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        // block doesn't exist\n        return callback(null, null);\n      }\n      return callback(err);\n    }\n    callback(null, block.transactions.length);\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByHash = function(blockHash, callback) {\n  this.eth_getBlockTransactionCountByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getTransactionReceipt = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt && receipt.block) {\n      result = receipt.toJSON();\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByHash = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      // if there is no block then the transaction is still pending\n      if (!receipt.block) {\n        // assemble the block object with null values for pending transactions\n        receipt.block = {\n          transactions: [],\n          hash: () => {\n            return null;\n          },\n          header: { number: null }\n        };\n\n        result = receipt.tx.toJsonRpc(receipt.block);\n      } else {\n        result = receipt.tx.toJsonRpc(receipt.block);\n      }\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockHashAndIndex = function(hashOrNumber, index, callback) {\n  index = to.number(index);\n\n  this.state.getBlock(hashOrNumber, function(err, block) {\n    if (err) {\n      // block doesn't exist by that hash\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    if (index >= block.transactions.length) {\n      return callback(new Error(\"Transaction at index \" + to.hex(index) + \" does not exist in block.\"));\n    }\n\n    var tx = block.transactions[index];\n    var result = tx.toJsonRpc(block);\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockNumberAndIndex = function(hashOrNumber, index, callback) {\n  this.eth_getTransactionByBlockHashAndIndex(hashOrNumber, index, callback);\n};\n\nGethApiDouble.prototype.eth_getTransactionCount = function(address, blockNumber, callback) {\n  this.state.getTransactionCount(address, blockNumber, (err, count) => {\n    if (err instanceof BlockOutOfRangeError) {\n      return callback(null, null);\n    }\n    return callback(err, count);\n  });\n};\n\nGethApiDouble.prototype.eth_sign = function(address, dataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.sign(address, dataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_signTypedData = function(address, typedDataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.signTypedData(address, typedDataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_sendTransaction = function(txData, callback) {\n  this.state.queueTransaction(\"eth_sendTransaction\", txData, null, callback);\n};\n\nGethApiDouble.prototype.eth_sendRawTransaction = function(rawTx, callback) {\n  let data;\n  if (rawTx) {\n    data = to.buffer(rawTx);\n  }\n\n  if (data === undefined) {\n    throw new TXRejectedError(\"rawTx must be a string, JSON-encoded Buffer, or Buffer.\");\n  }\n\n  this.state.queueRawTransaction(data, callback);\n};\n\nGethApiDouble.prototype.eth_call = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n\n  this.state.queueTransaction(\"eth_call\", txData, blockNumber, callback); // :(\n};\n\nGethApiDouble.prototype.eth_estimateGas = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n  this.state.queueTransaction(\"eth_estimateGas\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getStorageAt = function(address, position, blockNumber, callback) {\n  this.state.queueStorage(address, position, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_newBlockFilter = function(callback) {\n  var filterId = utils.addHexPrefix(utils.intToHex(this.state.latestFilterId));\n  this.state.latestFilterId += 1;\n  callback(null, filterId);\n};\n\nGethApiDouble.prototype.eth_getFilterChanges = function(filterId, callback) {\n  var blockHash = this.state\n    .latestBlock()\n    .hash()\n    .toString(\"hex\");\n  // Mine a block after each request to getFilterChanges so block filters work.\n  this.state.mine();\n  callback(null, [blockHash]);\n};\n\nGethApiDouble.prototype.eth_getLogs = function(filter, callback) {\n  this.state.getLogs(filter, callback);\n};\n\nGethApiDouble.prototype.eth_uninstallFilter = function(filterId, callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.eth_protocolVersion = function(callback) {\n  callback(null, \"63\");\n};\n\nGethApiDouble.prototype.bzz_hive = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.bzz_info = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.shh_version = function(callback) {\n  callback(null, \"2\");\n};\n\nGethApiDouble.prototype.eth_getCompilers = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.eth_syncing = function(callback) {\n  callback(null, false);\n};\n\nGethApiDouble.prototype.net_listening = function(callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.net_peerCount = function(callback) {\n  callback(null, 0);\n};\n\nGethApiDouble.prototype.web3_clientVersion = function(callback) {\n  callback(null, \"EthereumJS TestRPC/v\" + pkg.version + \"/ethereum-js\");\n};\n\nGethApiDouble.prototype.web3_sha3 = function(string, callback) {\n  callback(null, to.hex(utils.sha3(string)));\n};\n\nGethApiDouble.prototype.net_version = function(callback) {\n  // net_version returns a string containing a base 10 integer.\n  callback(null, this.state.net_version + \"\");\n};\n\nGethApiDouble.prototype.miner_start = function(threads, callback) {\n  if (!callback && typeof threads === \"function\") {\n    callback = threads;\n    threads = null;\n  }\n\n  this.state.startMining(function(err) {\n    callback(err, true);\n  });\n};\n\n// indicate that `miner_start` only requires one argument (the callback)\nGethApiDouble.prototype.miner_start.minLength = 1;\n\nGethApiDouble.prototype.miner_stop = function(callback) {\n  this.state.stopMining(function(err) {\n    callback(err, true);\n  });\n};\n\nGethApiDouble.prototype.rpc_modules = function(callback) {\n  // returns the availible api modules and versions\n  callback(null, { eth: \"1.0\", net: \"1.0\", rpc: \"1.0\", web3: \"1.0\", evm: \"1.0\", personal: \"1.0\" });\n};\n\nGethApiDouble.prototype.personal_listAccounts = function(callback) {\n  callback(null, Object.keys(this.state.personal_accounts));\n};\n\nGethApiDouble.prototype.personal_newAccount = function(password, callback) {\n  var account = this.state.createAccount({ generate: true });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_importRawKey = function(rawKey, password, callback) {\n  var account = this.state.createAccount({ secretKey: rawKey });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_lockAccount = function(address, callback) {\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var error = \"Account not found\";\n    return callback(error);\n  }\n  delete this.state.unlocked_accounts[address.toLowerCase()];\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_unlockAccount = function(address, password, duration, callback) {\n  // FIXME handle duration\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var accountError = \"Account not found\";\n    return callback(accountError);\n  }\n\n  var storedPassword = this.state.account_passwords[address.toLowerCase()];\n  if (storedPassword !== undefined && storedPassword !== password) {\n    var passwordError = \"Invalid password\";\n    return callback(passwordError);\n  }\n\n  this.state.unlocked_accounts[address.toLowerCase()] = true;\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_sendTransaction = function(txData, password, callback) {\n  if (txData.from == null) {\n    var error = \"Sender not found\";\n    callback(error);\n    return;\n  }\n\n  var from = utils.addHexPrefix(txData.from).toLowerCase();\n\n  var self = this;\n  self.personal_unlockAccount(from, password, null, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.state.queueTransaction(\"eth_sendTransaction\", txData, null, function(err, ret) {\n      self.state.unlocked_accounts[from.toLowerCase()] = false;\n      callback(err, ret);\n    });\n  });\n};\n\n/* Functions for testing purposes only. */\n\nGethApiDouble.prototype.evm_snapshot = function(callback) {\n  this.state.snapshot(callback);\n};\n\nGethApiDouble.prototype.evm_revert = function(snapshotId, callback) {\n  this.state.revert(snapshotId, callback);\n};\n\nGethApiDouble.prototype.evm_increaseTime = function(seconds, callback) {\n  callback(null, this.state.blockchain.increaseTime(seconds));\n};\n\nGethApiDouble.prototype.evm_setTime = function(date, callback) {\n  callback(null, this.state.blockchain.setTime(date));\n};\n\nGethApiDouble.prototype.evm_mine = function(timestamp, callback) {\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n  this.state.processBlock(timestamp, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err, \"0x0\");\n  });\n};\n\n// indicate that `evm_mine` only requires one argument (the callback)\nGethApiDouble.prototype.evm_mine.minLength = 1;\n\nGethApiDouble.prototype.debug_traceTransaction = function(txHash, params, callback) {\n  if (typeof params === \"function\") {\n    callback = params;\n    params = [];\n  }\n\n  this.state.queueTransactionTrace(txHash, params, callback);\n};\n\n/*\n  RPC AUDIT:\n  TODO ETH: eth_getUncleCountByBlockHash, eth_getUncleCountByBlockNumber, eth_getUncleByBlockHashAndIndex,\n        eth_getUncleByBlockNumberAndIndex, eth_getWork, eth_submitWork, eth_submitHashrate\n\n  TODO DB: db_putString, db_getString, db_putHex, db_getHex\n\n  TODO WHISPER: shh_post, shh_newIdentity, shh_hasIdentity, shh_newGroup, shh_addToGroup,\n        shh_newFilter, shh_uninstallFilter, shh_getFilterChanges, shh_getMessages\n*/\n\n/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block.\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockHash = function(hash, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns the number of uncles in a block from a block matching the given block number.\n *\n * @param {QUANTITY} blockNumber -\n *  ^integer of a block number, or the string \"latest\", \"earliest\" or \"pending\". Ex: '0xe8', // 232\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockNumber = function(blockNumber, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns information about a uncle of a block by hash and uncle index position.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block\n * @param {QUANTITY} index - the uncle's index position.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Object} result - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockHashAndIndex = function(hash, index, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns information about a uncle of a block by number and uncle index position.\n *\n * @param {QUANTITY} blockNumber -\n * ^a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block parameter.\n * @param {QUANTITY} uncleIndex - the uncle's index position.\n * @callback callback\n * @param {error} err - Error object\n * @param {Object} resutl - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockNumberAndIndex = function(blockNumber, uncleIndex, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns: An Array with the following elements\n * 1: DATA, 32 Bytes - current block header pow-hash\n * 2: DATA, 32 Bytes - the seed hash used for the DAG.\n * 3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n *\n * @param {QUANTITY} filterId - A filter id\n * @callback callback\n * @param {error} err - Error object\n * @param {Array} result - the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n */\nGethApiDouble.prototype.eth_getWork = function(filterId, callback) {\n  callback(null, []);\n};\n\n/**\n * Used for submitting a proof-of-work solution\n *\n * @param {DATA, 8 Bytes} nonce - The nonce found (64 bits)\n * @param {DATA, 32 Bytes} powHash - The header's pow-hash (256 bits)\n * @param {DATA, 32 Bytes} digest - The mix digest (256 bits)\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the provided solution is valid, otherwise false.\n */\nGethApiDouble.prototype.eth_submitWork = function(nonce, powHash, digest, callback) {\n  callback(null, false);\n};\n\n/**\n * Used for submitting mining hashrate.\n *\n * @param {String} hashRate - a hexadecimal string representation (32 bytes) of the hash rate\n * @param {String} clientID - A random hexadecimal(32 bytes) ID identifying the client\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if submitting went through succesfully and false otherwise.\n */\nGethApiDouble.prototype.eth_submitHashrate = function(hashRate, clientID, callback) {\n  callback(null, false);\n};\n\n/**\n * Stores a string in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {String} value - String to store.\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putString = function(dbName, key, value, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns string from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} - Error Object\n * @param {String} result - The previously stored string.\n */\nGethApiDouble.prototype.db_getString = function(dbName, key, callback) {\n  callback(null, \"\");\n};\n\n/**\n * Stores binary data in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {DATA} data - Data to store.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putHex = function(dbName, key, data, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns binary data from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA} result - The previously stored data.\n */\nGethApiDouble.prototype.db_getHex = function(dbName, key, callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Sends a whisper message.\n *\n * @param {DATA, 60 Bytes} from - (optional) The identity of the sender.\n * @param {DATA, 60 Bytes} to -\n *  ^(optional) The identity of the receiver. When present whisper will encrypt the message so that\n *  only the receiver can decrypt it.\n * @param {Array of DATA} topics - Array of DATA topics, for the receiver to identify messages.\n * @param {DATA} payload - The payload of the message.\n * @param {QUANTITY} priority - The integer of the priority in a range from ... (?).\n * @param {QUANTITY} ttl - integer of the time to live in seconds.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the message was sent, otherwise false.\n */\nGethApiDouble.prototype.shh_post = function(from, to, topics, payload, priority, ttl, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates new whisper identity in the client.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new identiy.\n */\nGethApiDouble.prototype.shh_newIdentity = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Checks if the client hold the private keys for a given identity.\n *\n * @param {DATA, 60 Bytes} address - The identity address to check.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the client holds the privatekey for that identity, otherwise false.\n */\nGethApiDouble.prototype.shh_hasIdentity = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates a new group.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new group.\n */\nGethApiDouble.prototype.shh_newGroup = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Adds a whisper identity to the group\n *\n * @param {DATA, 60 Bytes} - The identity address to add to a group.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_addToGroup = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n *\n * @param {DATA, 60 Bytes} to -\n * ^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n *  if the client holds the private key to this identity.\n * @param {Array of DATA} topics - Array of DATA topics which the incoming message's topics should match.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_newFilter = function(to, topics, callback) {\n  callback(null, false);\n};\n\n/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - true if the filter was successfully uninstalled, otherwise false.\n */\nGethApiDouble.prototype.shh_uninstallFilter = function(id, callback) {\n  callback(null, false);\n};\n\n/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n */\nGethApiDouble.prototype.shh_getFilterChanges = function(id, callback) {\n  callback(null, []);\n};\n\n/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - See: shh_getFilterChanges\n */\nGethApiDouble.prototype.shh_getMessages = function(id, callback) {\n  callback(null, false);\n};\n\nmodule.exports = GethApiDouble;\n","var Account = require(\"ethereumjs-account\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Transaction = require(\"./utils/transaction\");\nvar utils = require(\"ethereumjs-util\");\nvar seedrandom = require(\"seedrandom\");\nvar bip39 = require(\"bip39\");\nvar wallet = require(\"ethereumjs-wallet\");\nvar hdkey = require(\"ethereumjs-wallet/hdkey\");\nvar async = require(\"async\");\nvar BlockchainDouble = require(\"./blockchain_double.js\");\nvar ForkedBlockchain = require(\"./utils/forkedblockchain.js\");\nvar Web3 = require(\"web3\");\nvar sigUtil = require(\"eth-sig-util\");\nvar _ = require(\"lodash\");\nconst { BlockOutOfRangeError } = require(\"./utils/errorhelper\");\n\nconst ZERO_BUFFER = Buffer.from([0]);\n\nvar to = require(\"./utils/to\");\nvar random = require(\"./utils/random\");\nvar TXRejectedError = require(\"./utils/txrejectederror\");\n\nfunction StateManager(options, provider) {\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  if (options.fork) {\n    this.blockchain = new ForkedBlockchain(options);\n  } else {\n    this.blockchain = new BlockchainDouble(options);\n  }\n\n  this.vm = this.blockchain.vm;\n  this.stateTrie = this.blockchain.stateTrie;\n\n  this.accounts = {};\n  this.secure = !!options.secure;\n  this.account_passwords = {};\n  this.personal_accounts = {};\n  this.total_accounts = options.total_accounts;\n  this.coinbase = null;\n\n  this.latest_filter_id = 1;\n\n  // This queue manages actions that shouldn't be run in parallel.\n  // The action_processing flag ensures new actions are queued instead of\n  // run immediately.\n  this.action_queue = [];\n  this.action_processing = false;\n\n  this.snapshots = [];\n  this.logger = options.logger;\n  this.net_version = options.network_id;\n  this.mnemonic = options.mnemonic;\n  this.wallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(this.mnemonic));\n  this.wallet_hdpath = options.hdPath;\n\n  this.gasPriceVal = to.rpcQuantityHexString(options.gasPrice);\n\n  this.is_mining = true;\n  this.blockTime = options.blockTime;\n  this.is_mining_on_interval = !!options.blockTime;\n  this.mining_interval_timeout = null;\n\n  this._provider = provider;\n}\n\nconst defaultOptions = {\n  total_accounts: 10,\n  gasPrice: \"0x77359400\", // 2 gwei\n  default_balance_ether: 100,\n  unlocked_accounts: [],\n  hdPath: \"m/44'/60'/0'/0/\"\n};\n\nStateManager.prototype._applyDefaultOptions = function(options) {\n  // do this so that we can use the same seed on our next run and get the same\n  // results without explicitly setting a seed up front\n  if (!options.seed) {\n    options.seed = random.randomAlphaNumericString(10, seedrandom());\n  }\n\n  // generate a randomized default mnemonic\n  if (!options.mnemonic) {\n    let randomBytes = random.randomBytes(16, seedrandom(options.seed));\n    options.mnemonic = bip39.entropyToMnemonic(randomBytes.toString(\"hex\"));\n  }\n\n  if (!options.fork && !options.network_id) {\n    options.network_id = new Date().getTime();\n  }\n\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nStateManager.prototype.initialize = function(callback) {\n  var self = this;\n\n  var accounts = [];\n\n  let defaultBalanceWei = to.hex(Web3.utils.toWei(self.options.default_balance_ether.toString(), \"ether\"));\n\n  if (self.options.accounts) {\n    accounts = self.options.accounts.map(self.createAccount.bind(self));\n  } else {\n    if (!self.total_accounts) {\n      return callback(\n        new Error(\"Cannot initialize chain: either options.accounts or options.total_accounts must be specified\")\n      );\n    }\n\n    for (var i = 0; i < self.total_accounts; i++) {\n      accounts.push(\n        self.createAccount({\n          index: i,\n          balance: defaultBalanceWei\n        })\n      );\n    }\n  }\n\n  self.coinbase = to.hex(accounts[0].address);\n  self.accounts = {};\n\n  accounts.forEach(function(data) {\n    self.accounts[data.address] = data;\n    self.personal_accounts[data.address.toLowerCase()] = true;\n  });\n\n  // Turn array into object, mostly for speed purposes.\n  // No need for caller to specify private keys.\n  self.unlocked_accounts = self.options.unlocked_accounts.reduce(function(obj, address) {\n    // If it doesn't have a hex prefix, must be a number (either a string or number type).\n    if ((address + \"\").indexOf(\"0x\") !== 0) {\n      let idx = parseInt(address);\n      let account = accounts[idx];\n      if (!account) {\n        throw new Error(`Account at index ${idx} not found. Max index available is ${accounts.length - 1}.`);\n      }\n      address = account.address.toLowerCase();\n    }\n\n    obj[address.toLowerCase()] = true; // can be any value\n    return obj;\n  }, {});\n\n  if (!self.secure) {\n    accounts.forEach(function(data) {\n      self.unlocked_accounts[data.address.toLowerCase()] = data;\n    });\n  }\n\n  self.blockchain.initialize(accounts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If the user didn't pass a specific version id in, then use the\n    // forked blockchain's version (if it exists) or create our own.\n    if (!self.net_version) {\n      self.net_version = self.blockchain.forkVersion;\n    }\n\n    if (self.is_mining_on_interval) {\n      self.mineOnInterval();\n    }\n\n    callback();\n  });\n};\n\nStateManager.prototype._minerCancellationToken = null;\nStateManager.prototype.mineOnInterval = function() {\n  // cancel the a previous miner's timeout\n  clearTimeout(this.mining_interval_timeout);\n\n  // make sure a pending eth_mine doesn't come back and execute mineOnInterval\n  // again...\n  if (this._minerCancellationToken !== null) {\n    this._minerCancellationToken.cancelled = true;\n  }\n\n  // if mining was stopped `mineOnInterval` shouldn't start mining again\n  if (!this.is_mining) {\n    this.logger.log(\"Warning: mineOnInterval called when miner was stopped\");\n    return;\n  }\n\n  const cancellationToken = { cancelled: false };\n  this._minerCancellationToken = cancellationToken;\n\n  const timeout = (this.mining_interval_timeout = setTimeout(\n    this._provider.send.bind(this._provider),\n    this.blockTime * 1000,\n    { method: \"evm_mine\" },\n    () => {\n      if (!cancellationToken.cancelled) {\n        this.mineOnInterval.bind(this)();\n      }\n    }\n  ));\n\n  // Ensure this won't keep a node process open.\n  if (typeof timeout.unref === \"function\") {\n    timeout.unref();\n  }\n};\n\nStateManager.prototype.createAccount = function(opts, i) {\n  var secretKey;\n\n  if (opts.generate) {\n    secretKey = wallet.generate().getPrivateKey();\n  } else if (opts.secretKey) {\n    secretKey = utils.toBuffer(to.hex(opts.secretKey));\n  } else {\n    var index = typeof opts.index === \"undefined\" ? i : opts.index;\n    var acct = this.wallet.derivePath(this.wallet_hdpath + index); // index is a number\n    secretKey = acct.getWallet().getPrivateKey(); // Buffer\n  }\n\n  var publicKey = utils.privateToPublic(secretKey);\n  var address = utils.publicToAddress(publicKey);\n\n  var account = new Account();\n\n  account.balance = to.hex(opts.balance);\n\n  var data = {\n    secretKey: secretKey,\n    publicKey: publicKey,\n    address: to.hex(address).toLowerCase(),\n    account: account\n  };\n\n  return data;\n};\n\nStateManager.prototype.blockNumber = function(callback) {\n  return this.blockchain.getHeight(callback);\n};\n\nStateManager.prototype.gasPrice = function() {\n  return this.gasPriceVal;\n};\n\nStateManager.prototype.getBalance = function(address, number, callback) {\n  this.blockchain.getBalance(address, number, function(err, balance) {\n    if (balance) {\n      balance = to.rpcQuantityHexString(balance);\n    }\n    callback(err, balance);\n  });\n};\n\nStateManager.prototype.getTransactionCount = function(address, number, callback) {\n  this.blockchain.getNonce(address, number, function(err, nonce) {\n    if (nonce) {\n      nonce = to.rpcQuantityHexString(nonce);\n    }\n    callback(err, nonce);\n  });\n};\n\nStateManager.prototype.getCode = function(address, number, callback) {\n  this.blockchain.getCode(address, number, function(err, code) {\n    if (code) {\n      code = to.hex(code);\n    }\n    callback(err, code);\n  });\n};\n\nStateManager.prototype.queueRawTransaction = function(data, callback) {\n  const tx = new Transaction(data, Transaction.types.signed);\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = to.hex(tx.from).toLowerCase();\n  this._queueTransaction(\"eth_sendRawTransaction\", tx, from, null, callback);\n};\n\nStateManager.prototype.queueStorage = function(address, position, block, callback) {\n  this.action_queue.push({\n    method: \"eth_getStorageAt\",\n    address: utils.addHexPrefix(address),\n    position: utils.addHexPrefix(position),\n    block: block,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransaction = function(method, txJsonRpc, blockNumber, callback) {\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = txJsonRpc.from ? to.hex(txJsonRpc.from).toLowerCase() : null;\n\n  if (from == null) {\n    callback(new TXRejectedError(\"from not found; is required\"));\n    return;\n  }\n\n  // Error checks. It's possible to JSON.stringify a Buffer to JSON.\n  // we actually now handle this \"properly\" (not sure about spec), but for\n  // legacy reasons we don't allow it.\n  if (txJsonRpc.to && typeof txJsonRpc.to !== \"string\") {\n    return callback(new TXRejectedError(\"Invalid to address\"));\n  }\n\n  const isKnownAccount = this.accounts.hasOwnProperty(from);\n\n  if (method === \"eth_sendTransaction\" && !this.unlocked_accounts.hasOwnProperty(from)) {\n    const msg = isKnownAccount ? \"signer account is locked\" : \"sender account not recognized\";\n    return callback(new TXRejectedError(msg));\n  }\n\n  let type = Transaction.types.none;\n  if (!isKnownAccount || method === \"eth_call\") {\n    type |= Transaction.types.fake;\n  }\n\n  let tx;\n  try {\n    tx = Transaction.fromJSON(txJsonRpc, type);\n    this._setTransactionDefaults(tx);\n  } catch (e) {\n    callback(e);\n    return;\n  }\n  this._queueTransaction(method, tx, from, blockNumber, callback);\n};\n\nStateManager.prototype._setTransactionDefaults = function(tx) {\n  if (tx.gasLimit.length === 0) {\n    tx.gasLimit = utils.toBuffer(this.blockchain.defaultTransactionGasLimit);\n  }\n\n  if (tx.gasPrice.length === 0) {\n    tx.gasPrice = utils.toBuffer(this.gasPriceVal);\n  }\n\n  if (tx.value.length === 0) {\n    tx.value = Buffer.from([0]);\n  }\n\n  if (tx.to.length === 0 || tx.to.equals(ZERO_BUFFER)) {\n    tx.to = Buffer.allocUnsafe(0);\n  }\n};\n\nStateManager.prototype._queueTransaction = function(method, tx, from, blockNumber, callback) {\n  if (!(tx instanceof Transaction)) {\n    throw new TXRejectedError(\"tx must be of type Transaction\");\n  }\n\n  // If the transaction has a higher gas limit than the block gas limit, error.\n  if (to.number(tx.gasLimit) > to.number(this.blockchain.blockGasLimit)) {\n    return callback(new TXRejectedError(\"Exceeds block gas limit\"));\n  }\n\n  this.action_queue.push({\n    method,\n    from,\n    tx,\n    callback,\n    blockNumber\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransactionTrace = function(txHash, params, callback) {\n  this.action_queue.push({\n    method: \"debug_traceTransaction\",\n    hash: to.hex(txHash),\n    params: params,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.processNextAction = function(override) {\n  var self = this;\n\n  if (override !== true) {\n    if (this.action_processing === true || this.action_queue.length === 0) {\n      return;\n    }\n  }\n\n  var queued = this.action_queue.shift();\n\n  // Set the flag that we're currently processing something.\n  this.action_processing = true;\n\n  var intermediary = function(err, result) {\n    queued.callback(err, result);\n\n    if (self.action_queue.length > 0) {\n      self.processNextAction(true);\n    } else {\n      self.action_processing = false;\n    }\n  };\n\n  if (typeof queued.method === \"function\") {\n    var result = queued.method();\n    return intermediary(null, result);\n  } else if (queued.method === \"eth_getStorageAt\") {\n    this.blockchain.getStorage(queued.address, queued.position, queued.block, function(err, result) {\n      if (err) {\n        return intermediary(err);\n      }\n\n      if (result) {\n        result = utils.rlp.decode(result);\n      }\n\n      result = to.hex(result || 0);\n      intermediary(null, result);\n    });\n  } else if (queued.method === \"debug_traceTransaction\") {\n    this.blockchain.processTransactionTrace(queued.hash, queued.params, intermediary);\n  } else if (queued.method === \"eth_sendTransaction\" || queued.method === \"eth_sendRawTransaction\") {\n    this.processTransaction(queued.from, queued.tx, intermediary);\n  } else if (queued.method === \"eth_call\") {\n    this.processCall(queued.from, queued.tx, queued.blockNumber, intermediary);\n  } else if (queued.method === \"eth_estimateGas\") {\n    this.processGasEstimate(queued.from, queued.tx, queued.blockNumber, intermediary);\n  }\n};\n\nStateManager.prototype.sign = function(address, dataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  var secretKey = account.secretKey;\n  var msg = Buffer.from(dataToSign.replace(\"0x\", \"\"), \"hex\");\n  var msgHash = utils.hashPersonalMessage(msg);\n  var sgn = utils.ecsign(msgHash, Buffer.from(secretKey));\n  return utils.toRpcSig(sgn.v, sgn.r, sgn.s);\n};\n\nStateManager.prototype.signTypedData = function(address, typedDataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  if (!typedDataToSign.types) {\n    throw new Error(\"cannot sign data; types missing\");\n  }\n\n  if (!typedDataToSign.types.EIP712Domain) {\n    throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n  }\n\n  if (!typedDataToSign.domain) {\n    throw new Error(\"cannot sign data; domain missing\");\n  }\n\n  if (!typedDataToSign.primaryType) {\n    throw new Error(\"cannot sign data; primaryType missing\");\n  }\n\n  if (!typedDataToSign.message) {\n    throw new Error(\"cannot sign data; message missing\");\n  }\n\n  return sigUtil.signTypedData(account.secretKey, { data: typedDataToSign });\n};\n\nStateManager.prototype.printTransactionReceipt = function(txHash, error, callback) {\n  var self = this;\n\n  self.blockchain.getTransactionReceipt(txHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      receipt = receipt.toJSON();\n\n      self.logger.log(\"\");\n      self.logger.log(\"  Transaction: \" + txHash);\n\n      if (receipt.contractAddress != null) {\n        self.logger.log(\"  Contract created: \" + receipt.contractAddress);\n      }\n\n      self.logger.log(\"  Gas usage: \" + parseInt(receipt.gasUsed, 16));\n      self.logger.log(\"  Block Number: \" + parseInt(receipt.blockNumber, 16));\n      self.logger.log(\"  Block Time: \" + new Date(to.number(block.header.timestamp) * 1000).toString());\n\n      if (error) {\n        self.logger.log(\"  Runtime Error: \" + error.error);\n        if (error.reason) {\n          self.logger.log(\"  Revert reason: \" + error.reason);\n        }\n      }\n\n      self.logger.log(\"\");\n\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.processBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  self.blockchain.processNextBlock(timestamp, function(runtimeError, transactions, vmOutput) {\n    if (runtimeError && runtimeError instanceof RuntimeError === false) {\n      // This is bad. Get out.\n      return callback(runtimeError, transactions, vmOutput);\n    }\n\n    // TODO: Can we refactor printTransactionReceipt so it's synchronous?\n    // We technically have the raw vm receipts (though they're not full receipts here...).\n    async.eachSeries(\n      transactions,\n      function(tx, finishedPrinting) {\n        var hash = to.hex(tx.hash());\n        var error = runtimeError == null ? { results: {} } : runtimeError;\n        self.printTransactionReceipt(hash, error.results[hash], finishedPrinting);\n      },\n      callback(runtimeError, transactions, vmOutput)\n    );\n  });\n};\n\nStateManager.prototype.processBlocks = function(totalBlocks, callback) {\n  var self = this;\n\n  if (typeof totalBlocks === \"function\") {\n    callback = totalBlocks;\n    totalBlocks = null;\n  }\n\n  // Note: VM errors (errors that the VM directly returns) trump all runtime errors.\n  var runtimeError = null;\n  var amountProcessed = 0;\n\n  async.whilst(\n    function() {\n      var shouldContinue;\n\n      if (totalBlocks == null) {\n        shouldContinue = self.blockchain.pending_transactions.length > 0;\n      } else {\n        shouldContinue = amountProcessed < totalBlocks;\n      }\n\n      return shouldContinue;\n    },\n    function(done) {\n      self.processBlock(function(err, transactions, vmOutput) {\n        amountProcessed += 1;\n\n        if (err) {\n          if (err instanceof RuntimeError === false) {\n            // This is bad. Get out.\n            return done(err);\n          }\n\n          // We must have a RuntimeError. Merge results if we've found\n          // other runtime errors during this execution.\n          if (runtimeError == null) {\n            runtimeError = err;\n          } else {\n            runtimeError.combine(err);\n          }\n        }\n\n        // Note we don't quit on runtime errors. We keep processing transactions.\n        done();\n      });\n    },\n    function(err) {\n      // Remember: vm errors trump runtime errors\n      callback(err || runtimeError);\n    }\n  );\n};\n\nStateManager.prototype.processCall = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        if (err instanceof BlockOutOfRangeError) {\n          // block doesn't exist\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n\n      var result = \"0x\";\n      if (!results.error && results.vm.return) {\n        result = to.hex(results.vm.return);\n      } else if (results.error) {\n        self.logger.log(`Error processing call: ${results.error}`);\n      }\n\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processGasEstimate = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var result = \"0x\";\n      if (!results.error) {\n        result = results.gasRefund ? to.hex(results.gasUsed.add(results.gasRefund)) : to.hex(results.gasUsed);\n      } else {\n        self.logger.log(`Error calculating gas estimate: ${results.error}`);\n      }\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processTransaction = function(from, tx, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.queueTransaction(tx);\n\n    var txHash = to.hex(tx.hash());\n\n    // If we're not currently mining or we're mining on an interval,\n    // only queue the transaction, don't process it.\n    if (self.is_mining === false || self.is_mining_on_interval) {\n      return callback(null, txHash);\n    }\n\n    self.processBlocks(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.getTransactionReceipt = function(hash, callback) {\n  this.blockchain.getTransactionReceipt(hash, function(err, receipt) {\n    if (err && err.notFound) {\n      // Return null if the receipt's not found.\n      return callback(null, null);\n    }\n    callback(err, receipt);\n  });\n};\n\nStateManager.prototype.getBlock = function(hashOrNumber, callback) {\n  this.blockchain.getBlock(hashOrNumber, callback);\n};\n\nStateManager.prototype.getLogs = function(filter, callback) {\n  var self = this;\n\n  // filter.address may be a single address or an array\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n  var expectedAddress = filter.address && (Array.isArray(filter.address) ? filter.address : [filter.address]);\n  expectedAddress =\n    expectedAddress &&\n    expectedAddress.map(function(a) {\n      return a.toLowerCase();\n    });\n  var expectedTopics = filter.topics || [];\n\n  async.parallel(\n    {\n      fromBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.fromBlock || \"latest\"),\n      toBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.toBlock || \"latest\"),\n      latestBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, \"latest\")\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var fromBlock = results.fromBlock;\n      var toBlock = results.toBlock;\n      var latestBlock = results.latestBlock;\n\n      if (toBlock > latestBlock) {\n        toBlock = latestBlock;\n      }\n\n      var logs = [];\n      var current = fromBlock;\n\n      async.whilst(\n        function() {\n          return current <= toBlock;\n        },\n        function(finished) {\n          self.blockchain.getBlockLogs(current, function(err, blockLogs) {\n            if (err) {\n              return finished(err);\n            }\n\n            // Filter logs that match the address\n            var filtered = !expectedAddress\n              ? blockLogs\n              : blockLogs.filter(function(log) {\n                return expectedAddress.indexOf(log.address.toLowerCase()) > -1;\n              });\n\n            // Now filter based on topics.\n            filtered = filtered.filter(function(log) {\n              var keep = true;\n              for (var i = 0; i < expectedTopics.length; i++) {\n                var expectedTopic = expectedTopics[i];\n                var logTopic = log.topics[i];\n                if (expectedTopic == null) {\n                  continue;\n                }\n                var isMatch = Array.isArray(expectedTopic)\n                  ? expectedTopic.includes(logTopic)\n                  : expectedTopic === logTopic;\n                if (i >= log.topics.length || !isMatch) {\n                  keep = false;\n                  break;\n                }\n              }\n              return keep;\n            });\n\n            logs.push.apply(logs, filtered);\n\n            current += 1;\n            finished();\n          });\n        },\n        function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          logs = logs.map(function(log) {\n            return log.toJSON();\n          });\n\n          callback(err, logs);\n        }\n      );\n    }\n  );\n};\n\n// Note: Snapshots have 1-based ids.\nStateManager.prototype.snapshot = function(callback) {\n  var self = this;\n\n  this.blockchain.getHeight(function(err, blockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.snapshots.push({\n      blockNumber: blockNumber,\n      timeAdjustment: self.blockchain.timeAdjustment\n    });\n\n    self.logger.log(\"Saved snapshot #\" + self.snapshots.length);\n\n    callback(null, to.hex(self.snapshots.length));\n  });\n};\n\nStateManager.prototype.revert = function(snapshotId, callback) {\n  var self = this;\n\n  // Convert from hex.\n  snapshotId = utils.bufferToInt(snapshotId);\n\n  this.logger.log(\"Reverting to snapshot #\" + snapshotId);\n\n  if (snapshotId > this.snapshots.length) {\n    return false;\n  }\n\n  // Convert to zero based.\n  snapshotId = snapshotId - 1;\n  var timeAdjustment = this.snapshots[snapshotId].timeAdjustment;\n\n  // Loop through each snapshot with a higher id than the current one.\n  async.whilst(\n    function() {\n      return self.snapshots.length > snapshotId;\n    },\n    function(nextSnapshot) {\n      var snapshot = self.snapshots.pop();\n\n      // For each snapshot, asynchronously pop off the blocks it represents.\n      async.during(\n        function(doneWithTest) {\n          self.blockchain.getHeight(function(err, blockNumber) {\n            if (err) {\n              return doneWithTest(err);\n            }\n\n            doneWithTest(null, blockNumber > snapshot.blockNumber);\n          });\n        },\n        function(nextBlock) {\n          self.blockchain.popBlock(function(err) {\n            if (err) {\n              return nextBlock(err);\n            }\n            nextBlock();\n          });\n        },\n        nextSnapshot\n      );\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Pending transactions are removed when you revert.\n      self.blockchain.clearPendingTransactions();\n      // The time adjustment is restored to its prior state\n      self.blockchain.timeAdjustment = timeAdjustment;\n\n      callback(null, true);\n    }\n  );\n};\n\nStateManager.prototype.hasContractCode = function(address, callback) {\n  this.vm.stateManager.getContractCode(address, function(err, result) {\n    if (err != null) {\n      callback(err, false);\n    } else {\n      callback(null, true);\n    }\n  });\n};\n\nStateManager.prototype.startMining = function(callback) {\n  if (this.is_mining) {\n    process.nextTick(callback);\n    this.logger.log(\"Warning: startMining called when miner was already started\");\n    return;\n  }\n\n  this.is_mining = true;\n\n  if (this.is_mining_on_interval) {\n    this.mineOnInterval();\n    process.nextTick(callback);\n  } else {\n    this.processBlocks(callback);\n  }\n};\n\nStateManager.prototype.stopMining = function(callback) {\n  if (this.is_mining) {\n    if (this._minerCancellationToken) {\n      this._minerCancellationToken.cancelled = true;\n      this._minerCancellationToken = null;\n    }\n    this.is_mining = false;\n    clearTimeout(this.mining_interval_timeout);\n    this.mining_interval_timeout = null;\n  } else {\n    this.logger.log(\"Warning: stopMining called when miner was already stopped\");\n  }\n  callback && process.nextTick(callback);\n};\n\nStateManager.prototype.isUnlocked = function(address) {\n  return this.unlocked_accounts[address.toLowerCase()] != null;\n};\n\nStateManager.prototype.createTransactionWithCorrectNonce = function(tx, from, callback) {\n  // account for transactions waiting in the tx queue\n  this.blockchain.getQueuedNonce(from, (err, expectedNonce) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const validateNonce = (tx, expectedNonce) => {\n      if (tx.validateNonce(expectedNonce)) {\n        return Promise.resolve(tx);\n      } else {\n        const expected = to.number(expectedNonce);\n        const actual = to.number(tx.nonce);\n        return Promise.reject(\n          new TXRejectedError(\n            `the tx doesn't have the correct nonce. account has nonce of: ${expected} tx has nonce of: ${actual}`\n          )\n        );\n      }\n    };\n    const done = (tx) => callback(null, tx);\n\n    if (tx.isSigned()) {\n      validateNonce(tx, expectedNonce)\n        .then(done)\n        .catch(callback);\n    } else {\n      const sign = (tx) => {\n        // we need to sign transactions if they haven't been signed already\n        // but we never sign fake transactions\n        if (!tx.isFake() && !tx.isSigned()) {\n          const account = this.accounts[from];\n          if (account) {\n            tx.sign(account.secretKey);\n          }\n        }\n        return Promise.resolve(tx);\n      };\n\n      // Validate the tx's nonce and then sign the transaction.\n      // By signing this transaction now we ensure all future calls to tx.hash()\n      // return the same signed transaction hash. It's sort of an unintuitive\n      // quirk of etheremjs-tx that:\n      //   tx.hash(includeSignature);\n      //   tx.sign(secretKey);\n      //   tx.hash(includeSignature);\n      // will produce different hashes.\n      if (tx.nonce.length === 0) {\n        // Since this transaction is unsigned and the nonce was not defined\n        // we can go ahead and change the nonce and not worry about\n        // invalidating the tx hash the client may be expecting (automatic nonce\n        // calculation should have been expected by the client in this case).\n        tx.nonce = expectedNonce;\n        sign(tx).then(done);\n      } else {\n        validateNonce(tx, expectedNonce)\n          .then(sign)\n          .then(done)\n          .catch(callback);\n      }\n    }\n  });\n};\nmodule.exports = StateManager;\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-tx/fake\");","module.exports = require(\"assert\");","module.exports = require(\"rlp\");","module.exports = require(\"seedrandom\");","module.exports = require(\"bip39\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"scrypt.js\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"bs58check\");","'use strict';\n\nvar HDKey = require('hdkey');\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","module.exports = require(\"hdkey\");","module.exports = require(\"ethereumjs-vm-coverage\");","module.exports = require(\"heap\");","var LevelUpArrayAdapter = require(\"./database/leveluparrayadapter\");\nvar LevelUpObjectAdapter = require(\"./database/levelupobjectadapter\");\nvar levelup = require(\"levelup\");\nvar encode = require(\"encoding-down\");\nvar filedown = require(\"./database/filedown\");\nvar cachedown = require(\"cachedown\");\nvar txserializer = require(\"./database/txserializer\");\nvar blockserializer = require(\"./database/blockserializer\");\nvar bufferserializer = require(\"./database/bufferserializer\");\nvar BlockLogsSerializer = require(\"./database/blocklogsserializer\");\nvar ReceiptSerializer = require(\"./database/receiptserializer\");\nvar tmp = require(\"tmp\");\n\nfunction Database(options) {\n  this.options = options;\n  this.directory = null;\n}\n\nDatabase.prototype.initialize = function(callback) {\n  var self = this;\n\n  function getDir(cb) {\n    if (self.options.db_path) {\n      cb(null, self.options.db_path);\n    } else {\n      tmp.dir(cb);\n    }\n  }\n\n  getDir(function(err, directory) {\n    if (err) {\n      return callback(err);\n    }\n    const levelupOptions = { valueEncoding: \"json\" };\n    if (self.options.db) {\n      const store = self.options.db;\n      levelup(store, levelupOptions, finishInitializing);\n    } else {\n      self.directory = directory;\n      const store = encode(cachedown(directory, filedown).maxSize(100), levelupOptions);\n      levelup(store, {}, finishInitializing);\n    }\n  });\n\n  function finishInitializing(err, db) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db = db;\n\n    // Blocks, keyed by array index (not necessarily by block number) (0-based)\n    self.blocks = new LevelUpArrayAdapter(\"blocks\", self.db, blockserializer);\n\n    // Logs triggered in each block, keyed by block id (ids in the blocks array; not necessarily block number) (0-based)\n    self.blockLogs = new LevelUpArrayAdapter(\"blockLogs\", self.db, new BlockLogsSerializer(self));\n\n    // Block hashes -> block ids (ids in the blocks array; not necessarily block number) for quick lookup\n    self.blockHashes = new LevelUpObjectAdapter(\"blockHashes\", self.db);\n\n    // Transaction hash -> transaction objects\n    self.transactions = new LevelUpObjectAdapter(\"transactions\", self.db, txserializer);\n\n    // Transaction hash -> transaction receipts\n    self.transactionReceipts = new LevelUpObjectAdapter(\"transactionReceipts\", self.db, new ReceiptSerializer(self));\n\n    self.trie_db = new LevelUpObjectAdapter(\"trie_db\", self.db, bufferserializer, bufferserializer);\n\n    callback();\n  }\n};\n\nDatabase.prototype.close = function(callback) {\n  callback();\n};\n\nmodule.exports = Database;\n","var Sublevel = require(\"level-sublevel\");\nconst { LevelUpOutOfRangeError, BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\n// Level up adapter that looks like an array. Doesn't support inserts.\n\nfunction LevelUpArrayAdapter(name, db, serializer) {\n  this.db = Sublevel(db);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.serializer = serializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpArrayAdapter.prototype.length = function(callback) {\n  this.db.get(\"length\", function(err, result) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, 0);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, result);\n  });\n};\n\nLevelUpArrayAdapter.prototype._get = function(key, callback) {\n  var self = this;\n  this.db.get(key, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n    self.serializer.decode(val, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype._put = function(key, value, callback) {\n  var self = this;\n  this.serializer.encode(value, function(err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n    self.db.put(key, encoded, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.get = function(index, callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    if (index >= length) {\n      // index out of range\n      let RangeError =\n        self.name === \"blocks\"\n          ? new BlockOutOfRangeError(index, length)\n          : new LevelUpOutOfRangeError(self.name, index, length);\n      return callback(RangeError);\n    }\n    self._get(index, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.push = function(val, callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    // TODO: Do this in atomic batch.\n    self._put(length + \"\", val, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.put(\"length\", length + 1, callback);\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.pop = function(callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var newLength = length - 1;\n\n    // TODO: Do this in atomic batch.\n    self._get(newLength + \"\", function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.del(newLength + \"\", function(err) {\n        if (err) {\n          return callback(err);\n        }\n        self.db.put(\"length\", newLength, function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, val);\n        });\n      });\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.last = function(callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (length === 0) {\n      return callback(null, null);\n    }\n\n    self._get(length - 1 + \"\", callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.first = function(callback) {\n  this._get(\"0\", callback);\n};\n\nmodule.exports = LevelUpArrayAdapter;\n","var Sublevel = require(\"level-sublevel\");\nvar async = require(\"async\");\n\nfunction LevelUpObjectAdapter(name, db, valueserializer, keyserializer, options) {\n  this.db = Sublevel(db, options);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.valueserializer = valueserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n  this.keyserializer = keyserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpObjectAdapter.prototype.get = function(key, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.get(encodedKey, function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.valueserializer.decode(val, function(err, decodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, decodedValue);\n      });\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.put = function(key, value, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.valueserializer.encode(value, function(err, encoded) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.db.put(encodedKey, encoded, callback);\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.set = LevelUpObjectAdapter.prototype.put;\n\nLevelUpObjectAdapter.prototype.del = function(key, callback) {\n  var self = this;\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.del(encodedKey, callback);\n  });\n};\n\nLevelUpObjectAdapter.prototype.batch = function(array, options, callback) {\n  var self = this;\n\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nLevelUpObjectAdapter.prototype.isOpen = function() {\n  return true;\n};\n\nmodule.exports = LevelUpObjectAdapter;\n","module.exports = require(\"levelup\");","module.exports = require(\"encoding-down\");","var util = require(\"util\");\nvar AbstractLevelDOWN = require(\"abstract-leveldown\").AbstractLevelDOWN;\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nutil.inherits(FileDown, AbstractLevelDOWN);\n\nfunction FileDown(location) {\n  this.location = location;\n  AbstractLevelDOWN.call(this, location);\n}\n\nFileDown.prototype._open = function(options, callback) {\n  var self = this;\n  callback(null, self);\n};\n\nFileDown.prototype._put = function(key, value, options, callback) {\n  fs.writeFile(path.join(this.location, key), value, \"utf8\", callback);\n};\n\nFileDown.prototype._get = function(key, options, callback) {\n  fs.readFile(path.join(this.location, key), \"utf8\", function(err, data) {\n    if (err) {\n      return callback(new Error(\"NotFound\"));\n    }\n    callback(null, data);\n  });\n};\n\nFileDown.prototype._del = function(key, options, callback) {\n  fs.unlink(path.join(this.location, key), function(err) {\n    // Ignore when we try to delete a file that doesn't exist.\n    // I'm not sure why this happens. Worth looking into.\n    if (err) {\n      if (err.message.indexOf(\"ENOENT\") >= 0) {\n        return callback();\n      } else {\n        return callback(err);\n      }\n    }\n    callback();\n  });\n};\n\nFileDown.prototype._batch = function(array, options, callback) {\n  var self = this;\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, options, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nmodule.exports = function(location) {\n  return new FileDown(location);\n};\n","module.exports = require(\"abstract-leveldown\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"cachedown\");","var txserializer = require(\"./txserializer\");\nvar async = require(\"async\");\nvar Block = require(\"ethereumjs-block\");\n\nmodule.exports = {\n  encode: function(block, done) {\n    var encoded = block.toJSON(true);\n\n    async.map(\n      block.transactions,\n      function(tx, finished) {\n        txserializer.encode(tx, finished);\n      },\n      function(err, transactions) {\n        if (err) {\n          return done(err);\n        }\n        encoded.transactions = transactions;\n        done(null, encoded);\n      }\n    );\n  },\n  decode: function(json, done) {\n    var transactions = json.transactions;\n    json.transactions = [];\n\n    var block = new Block(json);\n\n    async.eachSeries(\n      transactions,\n      function(txJson, finished) {\n        txserializer.decode(txJson, function(err, tx) {\n          if (err) {\n            return finished(err);\n          }\n          block.transactions.push(tx);\n          finished();\n        });\n      },\n      function(err) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, block);\n      }\n    );\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar to = require(\"../utils/to\");\n\nmodule.exports = {\n  encode: function(val, cb) {\n    var hex = to.hex(val);\n    cb(null, hex);\n  },\n  decode: function(json, cb) {\n    cb(null, utils.toBuffer(json));\n  }\n};\n","var Log = require(\"../utils/log\");\nvar async = require(\"async\");\n\nfunction BlockLogsSerializer(database) {\n  this.database = database;\n}\n\nBlockLogsSerializer.prototype.encode = function(logs, done) {\n  logs = logs.map(function(log) {\n    return log.toJSON();\n  });\n\n  done(null, logs);\n};\n\nBlockLogsSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  if (json.length === 0) {\n    return done(null, []);\n  }\n\n  this.database.blockHashes.get(json[0].blockHash, function(err, blockIndex) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blocks.get(blockIndex, function(err, block) {\n      if (err) {\n        return done(err);\n      }\n\n      async.map(\n        json,\n        function(log, finished) {\n          finished(\n            null,\n            new Log({\n              block: block,\n              logIndex: log.logIndex,\n              transactionIndex: log.transactionIndex,\n              transactionHash: log.transactionHash,\n              address: log.address,\n              data: log.data,\n              topics: log.topics,\n              type: log.type\n            })\n          );\n        },\n        function(err, logs) {\n          if (err) {\n            return done(err);\n          }\n          done(null, logs);\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = BlockLogsSerializer;\n","var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n  // Make sure we can handle mixed/upper-case transaction hashes\n  // it doesn't seem possible to record a transaction hash that isn't\n  // already lower case, as that's the way ganache generates them, however\n  // I don't think it will hurt anything to normalize here anyway.\n  // If you can figure out how to test this please feel free to add a test!\n  var txHash = json.transactionHash.toLowerCase();\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs.filter((log) => log.transactionHash.toLowerCase() === txHash),\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n","module.exports = require(\"tmp\");","var BlockchainDouble = require(\"../blockchain_double.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./log.js\");\nvar Receipt = require(\"./receipt.js\");\nvar utils = require(\"ethereumjs-util\");\nvar ForkedStorageTrie = require(\"./forkedstoragetrie.js\");\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\nvar Transaction = require(\"./transaction\");\nvar async = require(\"async\");\nvar BN = require(\"bn.js\");\n\nvar inherits = require(\"util\").inherits;\n\ninherits(ForkedBlockchain, BlockchainDouble);\n\nfunction ForkedBlockchain(options) {\n  this.options = options || {};\n\n  if (options.fork == null) {\n    throw new Error(\"ForkedBlockchain must be passed a fork parameter.\");\n  }\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.fork_block_number;\n  this.forkVersion = null;\n\n  if (typeof this.fork === \"string\") {\n    if (this.fork.indexOf(\"@\") >= 0) {\n      var split = this.fork.split(\"@\");\n      this.fork = split[0];\n      this.forkBlockNumber = parseInt(split[1]);\n    }\n\n    this.fork = new Web3.providers.HttpProvider(this.fork);\n  }\n\n  this.time = options.time;\n  this.storageTrieCache = {};\n\n  BlockchainDouble.call(this, options);\n\n  this.createVMFromStateTrie = function() {\n    var vm = BlockchainDouble.prototype.createVMFromStateTrie.apply(this, arguments);\n    this.patchVM(vm);\n    return vm;\n  };\n\n  this.web3 = new Web3(this.fork);\n}\n\nForkedBlockchain.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.web3.eth.net.getId(function(err, version) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.forkVersion = version;\n\n    BlockchainDouble.prototype.initialize.call(self, accounts, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.patchVM(self.vm);\n\n      callback();\n    });\n  });\n};\nForkedBlockchain.prototype.patchVM = function(vm) {\n  // Unfortunately forking requires a bit of monkey patching, but it gets the job done.\n  vm.stateManager._lookupStorageTrie = this.lookupStorageTrie.bind(this);\n  vm.stateManager._cache._lookupAccount = this.getAccount.bind(this);\n  vm.stateManager.getContractCode = this.getCode.bind(this);\n};\n\nForkedBlockchain.prototype.createStateTrie = function(db, root) {\n  return new ForkedStorageTrie(db, root, {\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber,\n    blockchain: this\n  });\n};\n\nForkedBlockchain.prototype.createGenesisBlock = function(callback) {\n  var self = this;\n  var blockNumber = this.forkBlockNumber || \"latest\";\n\n  self.web3.eth.getBlock(blockNumber, function(err, json) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If no start time was passed, set the time to where we forked from.\n    // We only want to do this if a block was explicitly passed. If a block\n    // number wasn't passed, then we're using the last block and the current time.\n    if (!self.time && self.forkBlockNumber) {\n      self.time = self.options.time = new Date(to.number(json.timestamp) * 1000);\n      self.setTime(self.time);\n    }\n\n    blockNumber = to.hex(json.number);\n\n    // Update the relevant block numbers\n    self.forkBlockNumber = self.options.fork_block_number = blockNumber;\n    self.stateTrie.forkBlockNumber = blockNumber;\n\n    self.createBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      block.header.number = utils.toBuffer(to.number(json.number) + 1);\n      block.header.parentHash = utils.toBuffer(json.hash);\n\n      callback(null, block);\n    });\n  });\n};\n\nForkedBlockchain.prototype.createForkedStorageTrie = function(address) {\n  address = to.hex(address);\n\n  var trie = new ForkedStorageTrie(this.data.trie_db, null, {\n    address: address,\n    stateTrie: this.stateTrie,\n    blockchain: this,\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber\n  });\n\n  this.storageTrieCache[address] = trie;\n\n  return trie;\n};\n\nForkedBlockchain.prototype.lookupStorageTrie = function(address, callback) {\n  address = to.hex(address);\n\n  if (this.storageTrieCache[address] != null) {\n    return callback(null, this.storageTrieCache[address]);\n  }\n\n  callback(null, this.createForkedStorageTrie(address));\n};\n\nForkedBlockchain.prototype.isFallbackBlock = function(value, callback) {\n  var self = this;\n\n  self.getEffectiveBlockNumber(value, function(err, number) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, number <= to.number(self.forkBlockNumber));\n  });\n};\n\nForkedBlockchain.prototype.isBlockHash = function(value) {\n  return typeof value === \"string\" && value.indexOf(\"0x\") === 0 && value.length > 42;\n};\n\nForkedBlockchain.prototype.isFallbackBlockHash = function(value, callback) {\n  var self = this;\n\n  if (!this.isBlockHash(value)) {\n    return callback(null, false);\n  }\n\n  self.data.blockHashes.get(value, function(err, blockIndex) {\n    if (err) {\n      if (err.notFound) {\n        // If the block isn't found in our database, then it must be a fallback block.\n        return callback(null, true);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, false);\n  });\n};\n\nForkedBlockchain.prototype.getFallbackBlock = function(numberOrHash, cb) {\n  var self = this;\n\n  // This function sometimes gets passed hex values that aren't long enough to\n  // be a block hash. In that case, let's convert them to a big number so Web3\n  // doesn't get stopped up.\n  if (typeof numberOrHash === \"string\" && numberOrHash.length < 66) {\n    numberOrHash = self.web3.utils.toBN(numberOrHash);\n  }\n\n  self.web3.eth.getBlock(numberOrHash, true, function(err, json) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (json == null) {\n      return cb();\n    }\n\n    var block = new Block();\n\n    block.header.parentHash = utils.toBuffer(json.parentHash);\n    block.header.uncleHash = utils.toBuffer(json.sha3Uncles);\n    block.header.coinbase = utils.toBuffer(json.miner);\n    block.header.stateRoot = utils.toBuffer(json.stateRoot); // Should we include the following three?\n    block.header.transactionsTrie = utils.toBuffer(json.transactionsRoot);\n    block.header.receiptTrie = utils.toBuffer(json.receiptsRoot);\n    block.header.bloom = utils.toBuffer(json.logsBloom);\n    block.header.difficulty = utils.toBuffer(\"0x\" + json.totalDifficulty.toString(16)); // BigNumber\n    block.header.number = utils.toBuffer(json.number);\n    block.header.gasLimit = utils.toBuffer(json.gasLimit);\n    block.header.gasUsed = utils.toBuffer(json.gasUsed);\n    block.header.timestamp = utils.toBuffer(json.timestamp);\n    block.header.extraData = utils.toBuffer(json.extraData);\n\n    (json.transactions || []).forEach(function(txJson, index) {\n      block.transactions.push(Transaction.fromJSON(txJson, Transaction.types.real));\n    });\n\n    // Fake block. Let's do the worst.\n    // TODO: Attempt to fill out all block data so as to produce the same hash! (can we?)\n    block.hash = function() {\n      return utils.toBuffer(json.hash);\n    };\n\n    cb(null, block);\n  });\n};\n\nForkedBlockchain.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  this.isFallbackBlockHash(number, function(err, isFallbackBlockHash) {\n    if (err) {\n      return callback(err);\n    }\n    if (isFallbackBlockHash) {\n      return self.getFallbackBlock(number, callback);\n    }\n\n    self.isFallbackBlock(number, function(err, isFallbackBlock) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (isFallbackBlock) {\n        return self.getFallbackBlock(number, callback);\n      }\n\n      // If we don't have string-based a block hash, turn what we do have into a number\n      // before sending it to getBlock.\n      function getBlockReference(value, callback) {\n        if (!self.isBlockHash(value)) {\n          self.getRelativeBlockNumber(value, callback);\n        } else {\n          callback(null, value);\n        }\n      }\n\n      getBlockReference(number, function(err, blockReference) {\n        if (err) {\n          return callback(err);\n        }\n\n        BlockchainDouble.prototype.getBlock.call(self, blockReference, callback);\n      });\n    });\n  });\n};\n\nForkedBlockchain.prototype.getStorage = function(address, key, number, callback) {\n  this.lookupStorageTrie(address, function(err, trie) {\n    if (err) {\n      return callback(err);\n    }\n    trie.get(key, callback);\n  });\n};\n\nForkedBlockchain.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  if (!number) {\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n      // If we've stored the value and we're looking at one of our stored blocks,\n      // get it from our stored data.\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getCode.call(self, address, number, callback);\n      } else {\n        // Else, we need to fetch it from web3. If our number is greater than\n        // the fork, let's just use \"latest\".\n        if (number > to.number(self.forkBlockNumber)) {\n          number = \"latest\";\n        }\n\n        self.fetchCodeFromFallback(address, number, function(err, code) {\n          if (code) {\n            code = utils.toBuffer(code);\n          }\n          callback(err, code);\n        });\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    // If the account doesn't exist in our state trie, get it off the wire.\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getAccount.call(self, address, number, function(err, acc) {\n          if (err) {\n            return callback(err);\n          }\n          callback(null, acc);\n        });\n      } else {\n        self.fetchAccountFromFallback(address, number, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransaction = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransaction.call(this, hash, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n    if (tx != null) {\n      return callback(null, tx);\n    }\n\n    self.web3.eth.getTransaction(hash, function(err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result) {\n        result = Transaction.fromJSON(result, Transaction.types.signed);\n      }\n\n      callback(null, result);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransactionReceipt = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransactionReceipt.call(this, hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n    if (receipt) {\n      return callback(null, receipt);\n    }\n\n    self.web3.eth.getTransactionReceipt(hash, function(err, receiptJson) {\n      if (err) {\n        return callback(err);\n      }\n      if (!receiptJson) {\n        return callback();\n      }\n\n      async.parallel(\n        {\n          tx: self.getTransaction.bind(self, hash),\n          block: self.getBlock.bind(self, receiptJson.blockNumber)\n        },\n        function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          var logs = receiptJson.logs.map(function(log) {\n            return new Log(log);\n          });\n\n          var receipt = new Receipt(\n            result.tx,\n            result.block,\n            logs,\n            receiptJson.gasUsed,\n            receiptJson.cumulativeGasUsed,\n            receiptJson.contractAddress,\n            receiptJson.status,\n            to.hex(receiptJson.logsBloom)\n          );\n\n          callback(null, receipt);\n        }\n      );\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchAccountFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  async.parallel(\n    {\n      code: this.fetchCodeFromFallback.bind(this, address, blockNumber),\n      balance: this.fetchBalanceFromFallback.bind(this, address, blockNumber),\n      nonce: this.fetchNonceFromFallback.bind(this, address, blockNumber)\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var code = results.code;\n      var balance = results.balance;\n      var nonce = results.nonce;\n\n      var account = new Account({\n        nonce: nonce,\n        balance: balance\n      });\n\n      // This puts the code on the trie, keyed by the hash of the code.\n      // It does not actually link an account to code in the trie.\n      account.setCode(self.stateTrie, utils.toBuffer(code), function(err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, account);\n      });\n    }\n  );\n};\n\nForkedBlockchain.prototype.fetchCodeFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getCode(address, safeBlockNumber, function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n\n      code = \"0x\" + utils.toBuffer(code).toString(\"hex\");\n      callback(null, code);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchBalanceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getBalance(address, safeBlockNumber, function(err, balance) {\n      if (err) {\n        return callback(err);\n      }\n\n      balance = \"0x\" + new BN(balance).toString(16);\n      callback(null, balance);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchNonceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getTransactionCount(address, safeBlockNumber, function(err, nonce) {\n      if (err) {\n        return callback(err);\n      }\n\n      nonce = \"0x\" + self.web3.utils.toBN(nonce).toString(16);\n      callback(null, nonce);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getHeight = function(callback) {\n  this.latestBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.number(block.header.number));\n  });\n};\n\nForkedBlockchain.prototype.getRelativeBlockNumber = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, effective - to.number(self.forkBlockNumber) - 1);\n  });\n};\n\nForkedBlockchain.prototype.getSafeFallbackBlockNumber = function(blockNumber, callback) {\n  var forkBlockNumber = to.number(this.forkBlockNumber);\n\n  if (blockNumber == null) {\n    return callback(null, forkBlockNumber);\n  }\n\n  this.getEffectiveBlockNumber(blockNumber, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    if (effective > forkBlockNumber) {\n      effective = forkBlockNumber;\n    }\n\n    callback(null, effective);\n  });\n};\n\nForkedBlockchain.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.getRelativeBlockNumber(effective, function(err, relative) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (relative < 0) {\n        self.getBlock(number, function(err, block) {\n          if (err) {\n            return callback(err);\n          }\n\n          self.web3.currentProvider.send(\n            {\n              jsonrpc: \"2.0\",\n              method: \"eth_getLogs\",\n              params: [\n                {\n                  fromBlock: to.hex(number),\n                  toBlock: to.hex(number)\n                }\n              ],\n              id: new Date().getTime()\n            },\n            function(err, res) {\n              if (err) {\n                return callback(err);\n              }\n\n              var logs = res.result.map(function(log) {\n                // To make this result masquerade as the right information.\n                log.block = block;\n                return new Log(log);\n              });\n\n              callback(null, logs);\n            }\n          );\n        });\n      } else {\n        BlockchainDouble.prototype.getBlockLogs.call(self, relative, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype._checkpointTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._checkpointTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n    trie.customCheckpoint();\n  });\n};\n\nForkedBlockchain.prototype._revertTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._revertTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n\n    // We're trying to revert to a point before this trie was created.\n    // Let's just remove the trie.\n    if (trie.checkpoints.length === 0) {\n      delete self.storageTrieCache[address];\n    } else {\n      trie.customRevert();\n    }\n  });\n};\n\nmodule.exports = ForkedBlockchain;\n","var MerklePatriciaTree = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\n\ninherits(ForkedStorageTrie, MerklePatriciaTree);\n\nfunction ForkedStorageTrie(db, root, options) {\n  MerklePatriciaTree.call(this, db, root);\n\n  this.address = options.address;\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n\n  this.blockchain = options.blockchain;\n\n  this.web3 = new Web3();\n  this.web3.setProvider(this.fork);\n\n  this.checkpoints = [];\n}\n\nForkedStorageTrie.prototype.keyExists = function(key, callback) {\n  key = utils.toBuffer(key);\n\n  this.findPath(key, function(err, node, remainder, stack) {\n    var exists = false;\n    if (node && remainder.length === 0) {\n      exists = true;\n    }\n    callback(err, exists);\n  });\n};\n\n// Note: This overrides a standard method whereas the other methods do not.\nForkedStorageTrie.prototype.get = function(key, blockNumber, callback) {\n  var self = this;\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = self.forkBlockNumber;\n  }\n\n  // For geth; https://github.com/ethereumjs/ethereumjs-util/issues/79\n  blockNumber = to.rpcQuantityHexString(blockNumber);\n\n  key = utils.toBuffer(key);\n\n  // If the account doesn't exist in our state trie, get it off the wire.\n  this.keyExists(key, function(err, exists) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (exists) {\n      MerklePatriciaTree.prototype.get.call(self, key, function(err, r) {\n        callback(err, r);\n      });\n    } else {\n      // If this is the main trie, get the whole account.\n      if (self.address == null) {\n        self.blockchain.fetchAccountFromFallback(key, blockNumber, function(err, account) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, account.serialize());\n        });\n      } else {\n        self.web3.eth.getStorageAt(to.hex(self.address), to.hex(key), blockNumber, function(err, value) {\n          if (err) {\n            return callback(err);\n          }\n\n          value = utils.toBuffer(value);\n          value = utils.rlp.encode(value);\n\n          callback(null, value);\n        });\n      }\n    }\n  });\n};\n\n// I don't want checkpoints to be removed by commits.\n// Note: For some reason, naming this function checkpoint()\n// -- overriding the default function -- prevents it from\n// being called.\nForkedStorageTrie.prototype.customCheckpoint = function() {\n  this.checkpoints.push(this.root);\n};\n\nForkedStorageTrie.prototype.customRevert = function() {\n  this.root = this.checkpoints.pop();\n};\n\nmodule.exports = ForkedStorageTrie;\n","module.exports = require(\"web3-core\");","module.exports = require(\"web3-eth\");","module.exports = require(\"web3-net\");","module.exports = require(\"web3-eth-personal\");","module.exports = require(\"web3-shh\");","module.exports = require(\"web3-bzz\");","module.exports = require(\"web3-utils\");","module.exports = require(\"bn.js\");","module.exports = require(\"eth-sig-util\");","module.exports = {\n  // Mimics crypto.random bytes, but takes in a random number generator\n  // as its second parameter. rng is expected to be a function that takes\n  // no parameters and returns a result like Math.random().\n  // This is important because it allows for a seeded random number generator.\n  // Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.\n  randomBytes: function(length, rng) {\n    var buf = [];\n\n    for (var i = 0; i < length; i++) {\n      buf.push(rng() * 255);\n    }\n\n    return Buffer.from(buf);\n  },\n\n  randomAlphaNumericString: function(length, rng) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    let text = \"\";\n\n    for (var i = 0; i < length; i++) {\n      text += alphabet.charAt(Math.floor((rng || Math.random)() * alphabet.length));\n    }\n\n    return text;\n  }\n};\n","// this replaces `eth-block-tracker` in the provider-engine, as that block tracker is meant to work with\n// an external provider instance\n\nconst EventEmitter = require(\"events\");\nvar blockHelper = require(\"./utils/block_helper\");\n\nfunction GanacheBlockTracker(opts) {\n  opts = opts || {};\n  EventEmitter.apply(this);\n  if (!opts.blockchain) {\n    throw new Error(\"RpcBlockTracker - no blockchain specified.\");\n  }\n  if (!opts.blockchain.on) {\n    throw new Error(\"RpcBlockTracker - blockchain is not an EventEmitter.\");\n  }\n  this._blockchain = opts.blockchain;\n  this.start = this.start.bind(this);\n  this.stop = this.stop.bind(this);\n  this.getTrackingBlock = this.getTrackingBlock.bind(this);\n  this.awaitCurrentBlock = this.awaitCurrentBlock.bind(this);\n  this._setCurrentBlock = this._setCurrentBlock.bind(this);\n}\n\nGanacheBlockTracker.prototype = Object.create(EventEmitter.prototype);\nGanacheBlockTracker.prototype.constructor = GanacheBlockTracker;\n\nGanacheBlockTracker.prototype.getTrackingBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.getCurrentBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.awaitCurrentBlock = function() {\n  const self = this;\n  // return if available\n  if (this._currentBlock) {\n    return this._currentBlock;\n  }\n  // wait for \"sync\" event\n  return new Promise((resolve) => this.once(\"block\", resolve)).then(() => self._currentBlock);\n};\n\nGanacheBlockTracker.prototype.start = function(opts = {}) {\n  this._blockchain.on(\"block\", this._setCurrentBlock);\n  return Promise.resolve();\n};\n\nGanacheBlockTracker.prototype.stop = function() {\n  this._isRunning = false;\n  this._blockchain.removeListener(\"block\", this._setCurrentBlock);\n};\n\n//\n// private\n//\n\nGanacheBlockTracker.prototype._setCurrentBlock = function(newBlock) {\n  let block = blockHelper.toJSON(newBlock, true);\n  if (this._currentBlock && this._currentBlock.hash === block.hash) {\n    return;\n  }\n  const oldBlock = this._currentBlock;\n  this._currentBlock = block;\n  this.emit(\"latest\", block);\n  this.emit(\"sync\", { block, oldBlock });\n  this.emit(\"block\", block);\n};\n\nmodule.exports = GanacheBlockTracker;\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nvar Provider = require(\"./provider\");\nvar webSocketServer = require(\"./webSocketServer\");\nvar httpServer = require(\"./httpServer\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  create: function(options) {\n    options = _applyDefaultOptions(options || {});\n\n    var logger = options.logger;\n    var provider = new Provider(options);\n\n    var server = httpServer(provider, logger);\n    server.keepAliveTimeout = options.keepAliveTimeout;\n\n    let connectionCounter = 0;\n    const connections = {};\n    server.on(\"connection\", (conn) => {\n      let key = connectionCounter++;\n      connections[key] = conn;\n      conn.on(\"close\", () => delete connections[key]);\n    });\n\n    var oldListen = server.listen;\n\n    server.listen = function() {\n      var args = Array.prototype.slice.call(arguments);\n      var callback = function() {};\n      if (args.length > 0) {\n        var last = args[args.length - 1];\n        if (typeof last === \"function\") {\n          callback = args.pop();\n        }\n      }\n\n      var intermediary = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        server.provider.manager.waitForInitialization(callback);\n      };\n\n      args.push(intermediary);\n\n      oldListen.apply(server, args);\n    };\n\n    server.provider = provider;\n\n    if (options.ws) {\n      webSocketServer(server, provider, logger);\n    }\n\n    var oldClose = server.close;\n\n    server.close = function(callback) {\n      var args = Array.prototype.slice.call(arguments);\n      oldClose.apply(server, args);\n\n      server.provider.close(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        Object.keys(connections).forEach((key) => {\n          try {\n            connections[key].destroy();\n          } catch (error) {}\n        });\n      });\n    };\n\n    return server;\n  }\n};\n\nconst defaultOptions = {\n  logger: {\n    log: function() {}\n  },\n  ws: true,\n  keepAliveTimeout: 5000\n};\n\nvar _applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n","var WebSocketServer = require(\"websocket\").server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    try {\n      var payload = JSON.parse(message.utf8Data);\n    } catch (e) {\n      connection.reject(400, \"Bad Request\");\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        if (self.connections[connection.id]) {\n          delete self.connections[connection.id].subscriptions[payload.params[0]];\n        }\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  const subscription = this.connectionsBySubscriptionId[notification.params.subscription];\n  // Safety check for subscription/connection.\n  if (subscription) {\n    subscription.connection.send(JSON.stringify(notification));\n  }\n};\n","module.exports = require(\"websocket\");","const http = require(\"http\");\nconst { rpcError } = require(\"./utils/to\");\n\nfunction createCORSResponseHeaders(method, requestHeaders) {\n  // https://fetch.spec.whatwg.org/#http-requests\n  const headers = {};\n  let isCORSRequest = requestHeaders.hasOwnProperty(\"origin\");\n  if (isCORSRequest) {\n    // OPTIONS preflight requests need a little extra treatment\n    if (method === \"OPTIONS\") {\n      // we only allow POST requests, so it doesn't matter which method the request is asking for\n      headers[\"Access-Control-Allow-Methods\"] = \"POST\";\n      // echo all requested access-control-request-headers back to the response\n      if (requestHeaders.hasOwnProperty(\"access-control-request-headers\")) {\n        headers[\"Access-Control-Allow-Headers\"] = requestHeaders[\"access-control-request-headers\"];\n      }\n      // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever\n      // https://github.com/expressjs/cors/pull/121#issue-130260174\n      headers[\"Content-Length\"] = 0;\n\n      // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n      // minutes (this is the maximum time Chromium allows)\n      headers[\"Access-Control-Max-Age\"] = 600; // seconds\n    }\n\n    // From the spec: https://fetch.spec.whatwg.org/#http-responses\n    // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n    // but for any subsequent CORS requests it might not be. Support therefore\n    // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n    // header is added to all requests.\n    // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n    // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n    // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n    // returned even when no credentials are set in the browser this header must always be return on all requests.\n    // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n    //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n    //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n    headers[\"Access-Control-Allow-Credentials\"] = true;\n\n    // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n    // as the `Origin` header is also included for all requests whose method is neither\n    // `GET` nor `HEAD`.\"\n    // Explicitly set the origin instead of using *, since credentials\n    // can't be used in conjunction with *. This will always be set\n    /// for valid preflight requests.\n    headers[\"Access-Control-Allow-Origin\"] = requestHeaders.origin;\n  }\n  return headers;\n}\n\nfunction sendResponse(response, statusCode, headers, data) {\n  response.writeHead(statusCode, headers);\n  response.end(data);\n}\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        const headers = createCORSResponseHeaders(method, request.headers);\n\n        switch (method) {\n          case \"POST\":\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              sendResponse(response, 400, headers, \"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            // http connections do not support subscriptions\n            if (payload.method === \"eth_subscribe\" || payload.method === \"eth_unsubscribe\") {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 400, headers, rpcError(payload.id, -32000, \"notifications not supported\"));\n              break;\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 200, headers, JSON.stringify(result));\n            });\n\n            break;\n          case \"OPTIONS\":\n            sendResponse(response, 204, headers);\n            break;\n          default:\n            headers[\"Content-Type\"] = \"text/plain\";\n            sendResponse(response, 400, headers, \"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n","module.exports = require(\"http\");"],"sourceRoot":""}