"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolcAdapter = exports.compile = exports.outputSelection = void 0;
const lodash_1 = require("lodash");
const fs_1 = __importDefault(require("fs"));
const semver_1 = __importDefault(require("semver"));
exports.outputSelection = {
    '*': {
        '': [
            'ast',
        ],
    },
};
async function compile(filter, solcModule = require.resolve('solc'), solcSettings = { optimizer: { enabled: true, runs: 200 } }) {
    const solc = await SolcAdapter.require(solcModule);
    const files = await filter.glob('*.sol');
    const sources = lodash_1.fromPairs(await Promise.all(files.map(async (file) => [
        file,
        { content: await fs_1.default.promises.readFile(file, 'utf8') },
    ])));
    const solcInput = {
        language: "Solidity",
        sources: sources,
        settings: Object.assign(Object.assign({}, solcSettings), { outputSelection: exports.outputSelection }),
    };
    const solcOutput = solc.compile(solcInput);
    const { errors: allErrors } = solcOutput;
    if (allErrors && allErrors.some(e => e.severity === 'error')) {
        const errors = allErrors.filter(e => e.severity === 'error');
        const firstError = errors[0].formattedMessage;
        const moreErrors = errors.length === 1 ? '' : ` (And ${errors.length - 1} other errors...)`;
        throw new Error(`Solidity was unable to compile. ${firstError}${moreErrors}`);
    }
    return solcOutput;
}
exports.compile = compile;
class SolcAdapter {
    constructor(solc) {
        this.solc = solc;
    }
    static async require(solcModule) {
        const solc = await Promise.resolve().then(() => __importStar(require(solcModule)));
        return new SolcAdapter(solc);
    }
    compile(input) {
        const inputJSON = JSON.stringify(input);
        const solcOutputString = semver_1.default.satisfies(this.solc.version(), '^0.6')
            ? this.solc.compile(inputJSON, { import: importCallback })
            : this.solc.compileStandardWrapper(inputJSON, importCallback);
        const solcOutput = JSON.parse(solcOutputString);
        if (semver_1.default.satisfies(this.solc.version(), '^0.4')) {
            for (const source of Object.values(solcOutput.sources)) {
                for (const fileNode of source.ast.nodes) {
                    if (fileNode.nodeType === 'ContractDefinition') {
                        for (const contractNode of fileNode.nodes) {
                            if (contractNode.nodeType === 'FunctionDefinition') {
                                if (contractNode.isConstructor) {
                                    contractNode.kind = 'constructor';
                                }
                                else if (contractNode.name === '') {
                                    contractNode.kind = 'fallback';
                                }
                                else {
                                    contractNode.kind = 'function';
                                }
                            }
                        }
                    }
                }
            }
            ;
        }
        if (semver_1.default.satisfies(this.solc.version(), '^0.6')) {
            const adaptDocumentation = (node) => {
                var _a;
                if ((_a = node.documentation) === null || _a === void 0 ? void 0 : _a.text) {
                    node.documentation = node.documentation.text;
                }
            };
            for (const source of Object.values(solcOutput.sources)) {
                for (const fileNode of source.ast.nodes) {
                    adaptDocumentation(fileNode);
                    if (fileNode.nodeType === 'ContractDefinition') {
                        for (const contractNode of fileNode.nodes) {
                            adaptDocumentation(contractNode);
                        }
                    }
                }
            }
        }
        return solcOutput;
    }
}
exports.SolcAdapter = SolcAdapter;
function importCallback(path) {
    try {
        const resolved = require.resolve(path, { paths: ['.'] });
        return {
            contents: fs_1.default.readFileSync(resolved, 'utf8'),
        };
    }
    catch (e) {
        return {
            error: e.message,
        };
    }
}
//# sourceMappingURL=solc.js.map